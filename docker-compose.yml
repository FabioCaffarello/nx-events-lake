version: '3'

services:

  spark-batch-bronze:
    image: fabiocaffarello/spark-batch-bronze:latest
    container_name: spark-batch-bronze
    depends_on:
      rabbitmq:
        condition: service_healthy
      minio:
        condition: service_healthy
      config-handler:
        condition: service_healthy
      schema-handler:
        condition: service_healthy
      file-catalog-handler:
        condition: service_healthy
    networks:
      - nx-events-lake-network

  file-unzip:
    image: fabiocaffarello/file-unzip:latest
    container_name: file-unzip
    depends_on:
      rabbitmq:
        condition: service_healthy
      minio:
        condition: service_healthy
    networks:
      - nx-events-lake-network

  speech-transcriber:
    image: fabiocaffarello/speech-transcriber:latest
    container_name: speech-transcriber
    depends_on:
      rabbitmq:
        condition: service_healthy
      minio:
        condition: service_healthy
      config-handler:
        condition: service_healthy
      schema-handler:
        condition: service_healthy
    networks:
      - nx-events-lake-network

  media-transcoder:
    image: fabiocaffarello/media-transcoder:latest
    container_name: media-transcoder
    depends_on:
      rabbitmq:
        condition: service_healthy
      minio:
        condition: service_healthy
      config-handler:
        condition: service_healthy
      schema-handler:
        condition: service_healthy
    networks:
      - nx-events-lake-network

  streamlit-genai:
    image: fabiocaffarello/streamlit-genai:latest
    container_name: streamlit-genai
    environment:
      - NEO4J_URI=${NEO4J_URI-neo4j://neo4j-database:7687}
      - NEO4J_PASSWORD=${NEO4J_PASSWORD-password}
      - NEO4J_USERNAME=${NEO4J_USERNAME-neo4j}
      - OLLAMA_BASE_URL=${OLLAMA_BASE_URL-http://host.docker.internal:11434}
      - LLM=${LLM-llama2}
      - EMBEDDING_MODEL=${EMBEDDING_MODEL-sentence_transformer}
    ports:
      - 8503:8503
    depends_on:
      neo4j-database:
        condition: service_healthy
      pull-model:
        condition: service_completed_successfully
    networks:
      - nx-events-lake-network

  document-vectorizer:
    image: fabiocaffarello/document-vectorizer:latest
    container_name: document-vectorizer
    depends_on:
      rabbitmq:
        condition: service_healthy
      minio:
        condition: service_healthy
      config-handler:
        condition: service_healthy
      schema-handler:
        condition: service_healthy
    networks:
      - nx-events-lake-network

  source-watcher:
    image: fabiocaffarello/source-watcher:latest
    container_name: source-watcher
    depends_on:
      rabbitmq:
        condition: service_healthy
      minio:
        condition: service_healthy
      config-handler:
        condition: service_healthy
      schema-handler:
        condition: service_healthy
    networks:
      - nx-events-lake-network

  file-downloader:
    image: fabiocaffarello/file-downloader:latest
    container_name: file-downloader
    depends_on:
      rabbitmq:
        condition: service_healthy
      minio:
        condition: service_healthy
      config-handler:
        condition: service_healthy
      schema-handler:
        condition: service_healthy
    networks:
      - nx-events-lake-network

  events-handler:
    image: fabiocaffarello/events-handler:latest
    container_name: events-handler
    depends_on:
      rabbitmq:
        condition: service_healthy
      config-handler:
        condition: service_healthy
      schema-handler:
        condition: service_healthy
    networks:
      - nx-events-lake-network

  config-handler:
    image: fabiocaffarello/config-handler:latest
    container_name: config-handler
    ports:
      - 8002:8000
    depends_on:
      rabbitmq:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://config-handler:8000/healthz"]
      interval: 10s
      timeout: 3s
      retries: 6
    networks:
      - nx-events-lake-network

  schema-handler:
    image: fabiocaffarello/schema-handler:latest
    container_name: schema-handler
    ports:
      - 8003:8000
    depends_on:
      rabbitmq:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://schema-handler:8000/healthz"]
      interval: 10s
      timeout: 3s
      retries: 6
    networks:
      - nx-events-lake-network

  input-handler:
    image: fabiocaffarello/input-handler:latest
    container_name: input-handler
    ports:
      - 8001:8000
    depends_on:
      rabbitmq:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://input-handler:8000/healthz"]
      interval: 10s
      timeout: 1s
      retries: 4
    networks:
      - nx-events-lake-network

  output-handler:
    image: fabiocaffarello/output-handler:latest
    container_name: output-handler
    ports:
      - 8004:8000
    healthcheck:
      test: ["CMD", "curl", "-f", "http://output-handler:8000/healthz"]
      interval: 10s
      timeout: 1s
      retries: 4
    networks:
      - nx-events-lake-network

  staging-handler:
    image: fabiocaffarello/staging-handler:latest
    container_name: staging-handler
    ports:
      - 8005:8000
    depends_on:
      rabbitmq:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://staging-handler:8000/healthz"]
      interval: 10s
      timeout: 1s
      retries: 4
    networks:
      - nx-events-lake-network

  file-catalog-handler:
    image: fabiocaffarello/file-catalog-handler:latest
    container_name: file-catalog-handler
    ports:
      - 8006:8000
    depends_on:
      rabbitmq:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://file-catalog-handler:8000/healthz"]
      interval: 10s
      timeout: 1s
      retries: 4
    networks:
      - nx-events-lake-network


  dremio:
    platform: linux/x86_64
    image: dremio/dremio-oss:latest
    ports:
      - 9047:9047
      - 31010:31010
      - 32010:32010
    container_name: dremio
    networks:
      - nx-events-lake-network

  nessie:
    image: projectnessie/nessie
    container_name: nessie
    ports:
      - 19120:19120
    networks:
      - nx-events-lake-network

# accesskey: LyID4OINwyehOpzOIGp6
# secretket: QPRtbwCBFWo2oZnKleFVnko44O78EMirFRSoZvzM
  spark:
    image: "apache/spark:3.5.0-scala2.12-java11-ubuntu"
    container_name: spark
    command:
      - "/opt/spark/sbin/start-connect-server.sh"
      - "--conf"
      - "spark.driver.extraJavaOptions=-Divy.cache.dir=/tmp -Divy.home=/tmp"
      - "--packages"
      - "org.apache.spark:spark-connect_2.12:3.5.0,org.apache.iceberg:iceberg-spark-runtime-3.5_2.12:1.4.1,org.projectnessie.nessie-integrations:nessie-spark-extensions-3.5_2.12:0.73.0"
      # - "org.apache.spark:spark-connect_2.12:3.5.0,org.apache.hadoop/hadoop-common/3.3.4,org.apache.hadoop/hadoop-aws/3.3.4,com.amazonaws/aws-java-sdk-bundle/1.12.262"
      # - "org.apache.spark:spark-connect_2.12:3.5.0,org.apache.hadoop/hadoop-aws/3.3.4,com.amazonaws/aws-java-sdk-bundle/1.11.704"
      # - "--conf"
      # - "spark.sql.extensions=org.apache.iceberg.spark.extensions.IcebergSparkSessionExtensions,org.projectnessie.spark.extensions.NessieSparkSessionExtensions"
      - "--conf"
      - "spark.hadoop.fs.s3a.endpoint=http://minio:9000"
      - "--conf"
      - "spark.hadoop.fs.s3a.access.key=LyID4OINwyehOpzOIGp6"
      - "--conf"
      - "spark.hadoop.fs.s3a.secret.key=QPRtbwCBFWo2oZnKleFVnko44O78EMirFRSoZvzM"
      # - "--conf"
      # - "spark.hadoop.fs.s3a.path.style.access=true"
      # - "--conf"
      # - "spark.sql.catalog.nessie=org.apache.iceberg.spark.SparkCatalog"
      # - "--conf"
      # - "spark.sql.catalog.nessie.uri=http://nessie:19120/api/v1"
      # - "--conf"
      # - "spark.sql.catalog.nessie.ref=main"
      # - "--conf"
      # - "spark.sql.catalog.nessie.authentication.type=NONE"
      # - "--conf"
      # - "spark.sql.catalog.nessie.catalog-impl=org.apache.iceberg.nessie.NessieCatalog"
      # - "--conf"
      # - "spark.sql.catalog.nessie.s3.endpoint=http://minio:9000"
      # - "--conf"
      # - "spark.sql.catalog.nessie.warehouse=s3a://warehouse/"
      # - "--conf"
      # - "spark.sql.catalog.nessie.io-impl=org.apache.iceberg.aws.s3.S3FileIO"
    environment:
      - SPARK_NO_DAEMONIZE=true
      - SPARK_RPC_AUTHENTICATION_ENABLED=yes
      - SPARK_RPC_ENCRYPTION_ENABLED=yes
      - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED=no
      - SPARK_SSL_ENABLED=no
      - AWS_DEFAULT_REGION=us-east-1
      - AWS_REGION=us-east-1
      - MINIO_REGION=us-east-1
      - AWS_ACCESS_KEY_ID=LyID4OINwyehOpzOIGp6
      - AWS_SECRET_ACCESS_KEY=QPRtbwCBFWo2oZnKleFVnko44O78EMirFRSoZvzM
      # - AWS_S3_ENDPOINT=http://minio:9000
      # - WAREHOUSE=s3a://warehouse/
      # - NESSIE_URI=http://nessie:19120/api/v1
    ports:
      - "4040:4040"
      - "15002:15002"
    networks:
      - nx-events-lake-network

  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    restart: always
    ports:
      - 5672:5672
      - 15672:15672
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
      RABBITMQ_DEFAULT_VHOST: /
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 5s
      timeout: 5s
      retries: 2
    networks:
      - nx-events-lake-network

  rockmongo:
    image: mongo-express
    container_name: rockmongo
    ports:
      - 8082:8081
    environment:
      ME_CONFIG_MONGODB_SERVER: mongodb
      ME_CONFIG_MONGODB_PORT: 27017
    depends_on:
      - mongodb
    networks:
      - nx-events-lake-network

  mongodb:
    image: mongo
    container_name: mongodb
    ports:
      - 27017:27017
    volumes:
      - ./data/mongodb:/data/db
    networks:
      - nx-events-lake-network

  minio:
    image: minio/minio
    container_name: minio
    ports:
      - 9000:9000
      - 9001:9001
    environment:
      MINIO_ROOT_USER: minio-root-user
      MINIO_ROOT_PASSWORD: minio-root-password
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://minio:9000/minio/health/live"]
      interval: 10s
      timeout: 1s
      retries: 4
    volumes:
      - ./data/minio:/data
    networks:
      - nx-events-lake-network

  llm:
    image: ollama/ollama:latest
    container_name: llm
    ports:
      - 11434:11434
    networks:
      - nx-events-lake-network
    # FIXME: Need to figure out how to deploy with GPU (AMD instead of Nvidia)
    # deploy:
    #   resources:
    #     reservations:
    #       devices:
    #         - driver: nvidia
    #           count: 1 
    #           capabilities: [ gpu ]

  pull-model:
    container_name: pull-model
    image: genai-stack/pull-model:latest
    build:
      dockerfile: pull_model.Dockerfile
    environment:
      - OLLAMA_BASE_URL=${OLLAMA_BASE_URL-http://host.docker.internal:11434}
      - LLM=${LLM-llama2}
    networks:
      -  nx-events-lake-network

  neo4j-database:
    image: neo4j:5.11
    container_name: neo4j-database
    ports:
      - 7687:7687
      - 7474:7474
    volumes:
      - $PWD/data:/data
    environment:
      - NEO4J_AUTH=${NEO4J_USERNAME-neo4j}/${NEO4J_PASSWORD-password}
      - NEO4J_PLUGINS=["apoc"]
      - NEO4J_db_tx__log_rotation_retention__policy=false
    healthcheck:
        test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider localhost:7474 || exit 1"]
        interval: 5s
        timeout: 3s
        retries: 5
    networks:
      - nx-events-lake-network

  db:
    image: mysql:8.0.30-debian
    container_name: db
    environment:
      - MYSQL_DATABASE=micro_videos
      - MYSQL_ROOT_PASSWORD=root
    # volumes:
    #   - ./.docker/mysql:/docker-entrypoint-initdb.d
    tmpfs:
      - /var/lib/mysql
    security_opt:
      - seccomp:unconfined
    networks:
      - nx-events-lake-network


volumes:
  minio_data:

networks:
  nx-events-lake-network:
    name: nx-events-lake-network
    driver: bridge
