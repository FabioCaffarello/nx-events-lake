version: '3'

x-minio-common: &minio-common
  image: quay.io/minio/minio:latest
  command: server --console-address ":9001" http://minio{1...4}/data{1...2}
  expose:
    - "9000"
    - "9001"
  environment:
    MINIO_ROOT_USER: minio-root-user
    MINIO_ROOT_PASSWORD: minio-root-password
  healthcheck:
    test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
    interval: 30s
    timeout: 20s
    retries: 3
  networks:
    - nx-events-lake-network

services:
  config-handler:
    image: fabiocaffarello/config-handler:latest
    container_name: config-handler
    ports:
      - 8002:8000
    depends_on:
      rabbitmq:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://config-handler:8000/healthz"]
      interval: 10s
      timeout: 1s
      retries: 3
    networks:
      - nx-events-lake-network

  schema-handler:
    image: fabiocaffarello/schema-handler:latest
    container_name: schema-handler
    ports:
      - 8003:8000
    depends_on:
      rabbitmq:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://schema-handler:8000/healthz"]
      interval: 10s
      timeout: 1s
      retries: 3
    networks:
      - nx-events-lake-network

  input-handler:
    image: fabiocaffarello/input-handler:latest
    container_name: input-handler
    ports:
      - 8001:8000
    depends_on:
      rabbitmq:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://input-handler:8000/healthz"]
      interval: 10s
      timeout: 1s
      retries: 3
    networks:
      - nx-events-lake-network

  output-handler:
    image: fabiocaffarello/output-handler:latest
    container_name: output-handler
    ports:
      - 8004:8000
    healthcheck:
      test: ["CMD", "curl", "-f", "http://output-handler:8000/healthz"]
      interval: 10s
      timeout: 1s
      retries: 3
    networks:
      - nx-events-lake-network

  staging-handler:
    image: fabiocaffarello/staging-handler:latest
    container_name: staging-handler
    ports:
      - 8005:8000
    depends_on:
      rabbitmq:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://staging-handler:8000/healthz"]
      interval: 10s
      timeout: 1s
      retries: 3
    networks:
      - nx-events-lake-network

  source-watcher:
    image: fabiocaffarello/source-watcher:latest
    container_name: source-watcher
    depends_on:
      rabbitmq:
        condition: service_healthy
      minio:
        condition: service_healthy
      config-handler:
        condition: service_healthy
      schema-handler:
        condition: service_healthy
    networks:
      - nx-events-lake-network

  file-downloader:
    image: fabiocaffarello/file-downloader:latest
    container_name: file-downloader
    depends_on:
      rabbitmq:
        condition: service_healthy
      minio:
        condition: service_healthy
      config-handler:
        condition: service_healthy
      schema-handler:
        condition: service_healthy
    networks:
      - nx-events-lake-network

  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    restart: always
    ports:
      - 5672:5672
      - 15672:15672
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
      RABBITMQ_DEFAULT_VHOST: /
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 15s
      timeout: 10s
      retries: 2
    networks:
      - nx-events-lake-network

  rockmongo:
    image: mongo-express
    container_name: rockmongo
    ports:
      - 8082:8081
    environment:
      ME_CONFIG_MONGODB_SERVER: mongodb
      ME_CONFIG_MONGODB_PORT: 27017
    depends_on:
      - mongodb
    networks:
      - nx-events-lake-network

  mongodb:
    image: mongo
    container_name: mongodb
    ports:
      - 27017:27017
    volumes:
      - ./data/mongodb:/data/db
    networks:
      - nx-events-lake-network

  minio1:
    <<: *minio-common
    hostname: minio1
    volumes:
      # - common-data:/common-data
      - data1-1:/data1
      - data1-2:/data2

  minio2:
    <<: *minio-common
    hostname: minio2
    volumes:
      # - common-data:/common-data
      - data2-1:/data1
      - data2-2:/data2

  minio3:
    <<: *minio-common
    hostname: minio3
    volumes:
      # - common-data:/common-data
      - data3-1:/data1
      - data3-2:/data2

  minio4:
    <<: *minio-common
    hostname: minio4
    volumes:
      # - common-data:/common-data
      - data4-1:/data1
      - data4-2:/data2

  nginx:
    image: nginx:1.19.2-alpine
    hostname: nginx
    volumes:
      - ./.docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    ports:
      - "9000:9000"
      - "9001:9001"
    depends_on:
      - minio1
      - minio2
      - minio3
      - minio4
    networks:
      - nx-events-lake-network


volumes:
  # common-data:
  #   driver: local
  #   driver_opts:
  #     type: none
  #     o: bind
  #     device: ./data/minio/common-data

  data1-1:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/minio/data1-1

  data1-2:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/minio/data1-2

  data2-1:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/minio/data2-1

  data2-2:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/minio/data2-2

  data3-1:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/minio/data3-1

  data3-2:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/minio/data3-2

  data4-1:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/minio/data4-1

  data4-2:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/minio/data4-2

networks:
  nx-events-lake-network:
    name: nx-events-lake-network
    driver: bridge
