// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"apps/services-orchestration/services-schema-handler/internal/entity"
	"apps/services-orchestration/services-schema-handler/internal/event"
	"apps/services-orchestration/services-schema-handler/internal/infra/database"
	"apps/services-orchestration/services-schema-handler/internal/infra/web/handlers"
	"github.com/google/wire"
	"go.mongodb.org/mongo-driver/mongo"
	"libs/golang/shared/go-events/events"
)

// Injectors from wire.go:

func NewWebSchemaHandler(client *mongo.Client, eventDispatcher events.EventDispatcherInterface, database2 string) *handlers.WebSchemaHandler {
	schemaRepository := database.NewSchemaRepository(client, database2)
	schemaCreated := event.NewSchemaCreated()
	schemaVersionRepository := database.NewSchemaVersionRepository(client, database2)
	webSchemaHandler := handlers.NewWebSchemaHandler(eventDispatcher, schemaRepository, schemaCreated, schemaVersionRepository)
	return webSchemaHandler
}

func NewHealthzHandler() *handlers.WebHealthzHandler {
	webHealthzHandler := handlers.NewWebHealthzHandler()
	return webHealthzHandler
}

// wire.go:

var setSchemaRepositoryDependency = wire.NewSet(database.NewSchemaRepository, wire.Bind(
	new(entity.SchemaInterface),
	new(*database.SchemaRepository),
),
)

var setSchemaVersionRepositoryDependency = wire.NewSet(database.NewSchemaVersionRepository, wire.Bind(
	new(entity.SchemaVersionInterface),
	new(*database.SchemaVersionRepository),
),
)

var setSchemaCreatedEvent = wire.NewSet(event.NewSchemaCreated, wire.Bind(new(events.EventInterface), new(*event.SchemaCreated)))
