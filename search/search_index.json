{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Getting Started","text":"<p>Required Installations:</p> <ul> <li>Node.js 18.x</li> <li>Golang 1.20</li> <li>Protobuf <pre><code>go install google.golang.org/grpc/cmd/protoc-gen-go-grpc@latest\ngo install google.golang.org/protobuf/cmd/protoc-gen-go@latest \n</code></pre></li> <li>Wire <pre><code>go install github.com/google/wire/cmd/wire@latest \n</code></pre></li> <li>Python 3.10</li> <li>Poetry <pre><code>pip install poetry==1.2.0b3\n</code></pre></li> <li>docker</li> <li>docker-compose</li> </ul>"},{"location":"#install-dependencies","title":"Install dependencies","text":"<pre><code>npm install\n</code></pre> <pre><code>poetry install\n</code></pre>"},{"location":"#terminal-virtual-environment","title":"Terminal virtual environment","text":"<pre><code>poetry shell\n</code></pre>"},{"location":"summary/","title":"Summary","text":"<ul> <li>Getting Started</li> <li>Applications</li> <li>Libraries</li> <li>Dependency Graph</li> </ul>"},{"location":"reference/apps/services-orchestration/services-config-handler/","title":"services-config-handler","text":"<p>This is a Go API project structured following the clean architecture pattern with RabbitMQ integration for asynchronous messaging.</p>"},{"location":"reference/apps/services-orchestration/services-config-handler/#overview","title":"Overview","text":"<p>This project is designed to provide a scalable and maintainable architecture for building APIs. It separates concerns into distinct layers and integrates RabbitMQ for message queuing, ensuring the decoupling of components.</p>"},{"location":"reference/apps/services-orchestration/services-config-handler/#project-structure","title":"Project Structure","text":"<ul> <li><code>main.go</code>: Entry point of the application, where all components are initialized and the API server is started.</li> <li><code>envs</code>: Configuration files for different environments.</li> <li><code>configs</code>: Configuration Loading.</li> <li><code>internal</code>: The core application code.</li> <li><code>entity</code>: Defines the application's entities.</li> <li><code>event</code>: Handles application events.</li> <li><code>infra</code>: Infrastructure code, such as database and web.<ul> <li><code>web</code>: Handles HTTP server, routing, and API endpoints.</li> </ul> </li> <li><code>usecase</code>: Contains business logic and use cases.</li> </ul>"},{"location":"reference/apps/services-orchestration/services-config-handler/#getting-started","title":"Getting Started","text":"<ol> <li> <p>Setup Configuration:</p> </li> <li> <p>Create a <code>.env.{ENVIRONMENT}</code> file based on the example provided in the <code>envs</code> folder.</p> </li> <li> <p>Build The Application:</p> </li> </ol> <pre><code>npx nx image services-orchestration-services-config-handler --env=&lt;ENVIRONMENT&gt;\n</code></pre> <ol> <li>Run the Application:</li> </ol> <pre><code>docker-compose up -d\n</code></pre> <p>The API server will start on the specified port, and RabbitMQ will be used for asynchronous messaging.</p>"},{"location":"reference/apps/services-orchestration/services-config-handler/#configuration","title":"Configuration","text":"<p>The project uses a configuration system that loads environment-specific settings from the <code>envs</code> folder. Ensure that you provide the necessary environment variables or configuration files for your specific deployment.</p>"},{"location":"reference/apps/services-orchestration/services-config-handler/#dependency-management","title":"Dependency Management","text":"<p>This project uses Go modules for dependency management. You can use the <code>nx</code> commands to add or update dependencies as needed.</p> <pre><code>npx nx go-tidy services-orchestration-services-config-handler\n</code></pre>"},{"location":"reference/apps/services-orchestration/services-config-handler/#testing","title":"Testing","text":"<p>Unit tests and integration tests can be added to the respective packages in the <code>internal</code> directory. You can use Go's built-in testing framework for this purpose and you can run it with <code>nx</code>:</p> <pre><code>npx nx test services-orchestration-services-config-handler\n</code></pre>"},{"location":"reference/apps/services-orchestration/services-config-handler/#contributing","title":"Contributing","text":"<p>Contributions to this project are welcome. If you find issues or have suggestions for improvements, feel free to create an issue or submit a pull request.</p>"},{"location":"reference/apps/services-orchestration/services-config-handler/#acknowledgments","title":"Acknowledgments","text":"<ul> <li>This project follows the clean architecture pattern as described by Robert C. Martin.</li> <li>RabbitMQ is used for asynchronous messaging.</li> </ul> <p>Feel free to adapt this README file to your specific project's needs and add more details as necessary.</p>"},{"location":"reference/apps/services-orchestration/services-config-handler/openapi/","title":"OpenAPI Specification","text":""},{"location":"reference/apps/services-orchestration/services-input-handler/","title":"services-input-handler","text":"<p>This is a Go API project structured following the clean architecture pattern with RabbitMQ integration for asynchronous messaging.</p>"},{"location":"reference/apps/services-orchestration/services-input-handler/#overview","title":"Overview","text":"<p>This project is designed to provide a scalable and maintainable architecture for building APIs. It separates concerns into distinct layers and integrates RabbitMQ for message queuing, ensuring the decoupling of components.</p>"},{"location":"reference/apps/services-orchestration/services-input-handler/#project-structure","title":"Project Structure","text":"<ul> <li><code>main.go</code>: Entry point of the application, where all components are initialized and the API server is started.</li> <li><code>envs</code>: Configuration files for different environments.</li> <li><code>configs</code>: Configuration Loading.</li> <li><code>internal</code>: The core application code.</li> <li><code>entity</code>: Defines the application's entities.</li> <li><code>event</code>: Handles application events.</li> <li><code>infra</code>: Infrastructure code, such as database and web.<ul> <li><code>web</code>: Handles HTTP server, routing, and API endpoints.</li> </ul> </li> <li><code>usecase</code>: Contains business logic and use cases.</li> </ul>"},{"location":"reference/apps/services-orchestration/services-input-handler/#getting-started","title":"Getting Started","text":"<ol> <li> <p>Setup Configuration:</p> </li> <li> <p>Create a <code>.env.{ENVIRONMENT}</code> file based on the example provided in the <code>envs</code> folder.</p> </li> <li> <p>Build The Application:</p> </li> </ol> <pre><code>npx nx image services-orchestration-services-input-handler --env=&lt;ENVIRONMENT&gt;\n</code></pre> <ol> <li>Run the Application:</li> </ol> <pre><code>docker-compose up -d\n</code></pre> <p>The API server will start on the specified port, and RabbitMQ will be used for asynchronous messaging.</p>"},{"location":"reference/apps/services-orchestration/services-input-handler/#configuration","title":"Configuration","text":"<p>The project uses a configuration system that loads environment-specific settings from the <code>envs</code> folder. Ensure that you provide the necessary environment variables or configuration files for your specific deployment.</p>"},{"location":"reference/apps/services-orchestration/services-input-handler/#dependency-management","title":"Dependency Management","text":"<p>This project uses Go modules for dependency management. You can use the <code>nx</code> commands to add or update dependencies as needed.</p> <pre><code>npx nx go-tidy services-orchestration-services-input-handler\n</code></pre>"},{"location":"reference/apps/services-orchestration/services-input-handler/#testing","title":"Testing","text":"<p>Unit tests and integration tests can be added to the respective packages in the <code>internal</code> directory. You can use Go's built-in testing framework for this purpose and you can run it with <code>nx</code>:</p> <pre><code>npx nx test services-orchestration-services-input-handler\n</code></pre>"},{"location":"reference/apps/services-orchestration/services-input-handler/#contributing","title":"Contributing","text":"<p>Contributions to this project are welcome. If you find issues or have suggestions for improvements, feel free to create an issue or submit a pull request.</p>"},{"location":"reference/apps/services-orchestration/services-input-handler/#acknowledgments","title":"Acknowledgments","text":"<ul> <li>This project follows the clean architecture pattern as described by Robert C. Martin.</li> <li>RabbitMQ is used for asynchronous messaging.</li> </ul> <p>Feel free to adapt this README file to your specific project's needs and add more details as necessary.</p>"},{"location":"reference/apps/services-orchestration/services-input-handler/openapi/","title":"OpenAPI Specification","text":""},{"location":"reference/apps/services-orchestration/services-output-handler/","title":"services-output-handler","text":"<p>This is a Go API project structured following the clean architecture pattern.</p>"},{"location":"reference/apps/services-orchestration/services-output-handler/#overview","title":"Overview","text":"<p>This project is designed to provide a scalable and maintainable architecture for building APIs. It separates concerns into distinct layers ensuring the decoupling of components.</p>"},{"location":"reference/apps/services-orchestration/services-output-handler/#project-structure","title":"Project Structure","text":"<ul> <li><code>main.go</code>: Entry point of the application, where all components are initialized and the API server is started.</li> <li><code>envs</code>: Configuration files for different environments.</li> <li><code>configs</code>: Configuration Loading.</li> <li><code>internal</code>: The core application code.</li> <li><code>entity</code>: Defines the application's entities.</li> <li><code>infra</code>: Infrastructure code, such as database and web.<ul> <li><code>web</code>: Handles HTTP server, routing, and API endpoints.</li> </ul> </li> <li><code>usecase</code>: Contains business logic and use cases.</li> </ul>"},{"location":"reference/apps/services-orchestration/services-output-handler/#getting-started","title":"Getting Started","text":"<ol> <li> <p>Setup Configuration:</p> </li> <li> <p>Create a <code>.env.{ENVIRONMENT}</code> file based on the example provided in the <code>envs</code> folder.</p> </li> <li> <p>Build The Application:</p> </li> </ol> <pre><code>npx nx image services-orchestration-services-output-handler --env=&lt;ENVIRONMENT&gt;\n</code></pre> <ol> <li>Run the Application:</li> </ol> <pre><code>docker-compose up -d\n</code></pre> <p>The API server will start on the specified port, and RabbitMQ will be used for asynchronous messaging.</p>"},{"location":"reference/apps/services-orchestration/services-output-handler/#configuration","title":"Configuration","text":"<p>The project uses a configuration system that loads environment-specific settings from the <code>envs</code> folder. Ensure that you provide the necessary environment variables or configuration files for your specific deployment.</p>"},{"location":"reference/apps/services-orchestration/services-output-handler/#dependency-management","title":"Dependency Management","text":"<p>This project uses Go modules for dependency management. You can use the <code>nx</code> commands to add or update dependencies as needed.</p> <pre><code>npx nx go-tidy services-orchestration-services-output-handler\n</code></pre>"},{"location":"reference/apps/services-orchestration/services-output-handler/#testing","title":"Testing","text":"<p>Unit tests and integration tests can be added to the respective packages in the <code>internal</code> directory. You can use Go's built-in testing framework for this purpose and you can run it with <code>nx</code>:</p> <pre><code>npx nx test services-orchestration-services-output-handler\n</code></pre>"},{"location":"reference/apps/services-orchestration/services-output-handler/#contributing","title":"Contributing","text":"<p>Contributions to this project are welcome. If you find issues or have suggestions for improvements, feel free to create an issue or submit a pull request.</p>"},{"location":"reference/apps/services-orchestration/services-output-handler/#acknowledgments","title":"Acknowledgments","text":"<ul> <li>This project follows the clean architecture pattern as described by Robert C. Martin.</li> </ul> <p>Feel free to adapt this README file to your specific project's needs and add more details as necessary.</p>"},{"location":"reference/apps/services-orchestration/services-output-handler/openapi/","title":"OpenAPI Specification","text":""},{"location":"reference/apps/services-orchestration/services-schema-handler/","title":"services-schema-handler","text":"<p>This is a Go API project structured following the clean architecture pattern with RabbitMQ integration for asynchronous messaging.</p>"},{"location":"reference/apps/services-orchestration/services-schema-handler/#overview","title":"Overview","text":"<p>This project is designed to provide a scalable and maintainable architecture for building APIs. It separates concerns into distinct layers and integrates RabbitMQ for message queuing, ensuring the decoupling of components.</p>"},{"location":"reference/apps/services-orchestration/services-schema-handler/#project-structure","title":"Project Structure","text":"<ul> <li><code>main.go</code>: Entry point of the application, where all components are initialized and the API server is started.</li> <li><code>envs</code>: Configuration files for different environments.</li> <li><code>configs</code>: Configuration Loading.</li> <li><code>internal</code>: The core application code.</li> <li><code>entity</code>: Defines the application's entities.</li> <li><code>event</code>: Handles application events.</li> <li><code>infra</code>: Infrastructure code, such as database and web.<ul> <li><code>web</code>: Handles HTTP server, routing, and API endpoints.</li> </ul> </li> <li><code>usecase</code>: Contains business logic and use cases.</li> </ul>"},{"location":"reference/apps/services-orchestration/services-schema-handler/#getting-started","title":"Getting Started","text":"<ol> <li> <p>Setup Configuration:</p> </li> <li> <p>Create a <code>.env.{ENVIRONMENT}</code> file based on the example provided in the <code>envs</code> folder.</p> </li> <li> <p>Build The Application:</p> </li> </ol> <pre><code>npx nx image services-orchestration-services-schema-handler --env=&lt;ENVIRONMENT&gt;\n</code></pre> <ol> <li>Run the Application:</li> </ol> <pre><code>docker-compose up -d\n</code></pre> <p>The API server will start on the specified port, and RabbitMQ will be used for asynchronous messaging.</p>"},{"location":"reference/apps/services-orchestration/services-schema-handler/#configuration","title":"Configuration","text":"<p>The project uses a configuration system that loads environment-specific settings from the <code>envs</code> folder. Ensure that you provide the necessary environment variables or configuration files for your specific deployment.</p>"},{"location":"reference/apps/services-orchestration/services-schema-handler/#dependency-management","title":"Dependency Management","text":"<p>This project uses Go modules for dependency management. You can use the <code>nx</code> commands to add or update dependencies as needed.</p> <pre><code>npx nx go-tidy services-orchestration-services-schema-handler\n</code></pre>"},{"location":"reference/apps/services-orchestration/services-schema-handler/#testing","title":"Testing","text":"<p>Unit tests and integration tests can be added to the respective packages in the <code>internal</code> directory. You can use Go's built-in testing framework for this purpose and you can run it with <code>nx</code>:</p> <pre><code>npx nx test services-orchestration-services-schema-handler\n</code></pre>"},{"location":"reference/apps/services-orchestration/services-schema-handler/#contributing","title":"Contributing","text":"<p>Contributions to this project are welcome. If you find issues or have suggestions for improvements, feel free to create an issue or submit a pull request.</p>"},{"location":"reference/apps/services-orchestration/services-schema-handler/#acknowledgments","title":"Acknowledgments","text":"<ul> <li>This project follows the clean architecture pattern as described by Robert C. Martin.</li> <li>RabbitMQ is used for asynchronous messaging.</li> </ul> <p>Feel free to adapt this README file to your specific project's needs and add more details as necessary.</p>"},{"location":"reference/apps/services-orchestration/services-schema-handler/openapi/","title":"OpenAPI Specification","text":""},{"location":"reference/apps/services-orchestration/services-staging-handler/","title":"services-staging-handler","text":"<p>This is a Go API project structured following the clean architecture pattern with RabbitMQ integration for asynchronous messaging.</p>"},{"location":"reference/apps/services-orchestration/services-staging-handler/#overview","title":"Overview","text":"<p>This project is designed to provide a scalable and maintainable architecture for building APIs. It separates concerns into distinct layers and integrates RabbitMQ for message queuing, ensuring the decoupling of components.</p>"},{"location":"reference/apps/services-orchestration/services-staging-handler/#project-structure","title":"Project Structure","text":"<ul> <li><code>main.go</code>: Entry point of the application, where all components are initialized and the API server is started.</li> <li><code>envs</code>: Configuration files for different environments.</li> <li><code>configs</code>: Configuration Loading.</li> <li><code>internal</code>: The core application code.</li> <li><code>entity</code>: Defines the application's entities.</li> <li><code>event</code>: Handles application events.</li> <li><code>infra</code>: Infrastructure code, such as database and web.<ul> <li><code>web</code>: Handles HTTP server, routing, and API endpoints.</li> </ul> </li> <li><code>usecase</code>: Contains business logic and use cases.</li> </ul>"},{"location":"reference/apps/services-orchestration/services-staging-handler/#getting-started","title":"Getting Started","text":"<ol> <li> <p>Setup Configuration:</p> </li> <li> <p>Create a <code>.env.{ENVIRONMENT}</code> file based on the example provided in the <code>envs</code> folder.</p> </li> <li> <p>Build The Application:</p> </li> </ol> <pre><code>npx nx image services-orchestration-services-staging-handler --env=&lt;ENVIRONMENT&gt;\n</code></pre> <ol> <li>Run the Application:</li> </ol> <pre><code>docker-compose up -d\n</code></pre> <p>The API server will start on the specified port, and RabbitMQ will be used for asynchronous messaging.</p>"},{"location":"reference/apps/services-orchestration/services-staging-handler/#configuration","title":"Configuration","text":"<p>The project uses a configuration system that loads environment-specific settings from the <code>envs</code> folder. Ensure that you provide the necessary environment variables or configuration files for your specific deployment.</p>"},{"location":"reference/apps/services-orchestration/services-staging-handler/#dependency-management","title":"Dependency Management","text":"<p>This project uses Go modules for dependency management. You can use the <code>nx</code> commands to add or update dependencies as needed.</p> <pre><code>npx nx go-tidy services-orchestration-services-staging-handler\n</code></pre>"},{"location":"reference/apps/services-orchestration/services-staging-handler/#testing","title":"Testing","text":"<p>Unit tests and integration tests can be added to the respective packages in the <code>internal</code> directory. You can use Go's built-in testing framework for this purpose and you can run it with <code>nx</code>:</p> <pre><code>npx nx test services-orchestration-services-staging-handler\n</code></pre>"},{"location":"reference/apps/services-orchestration/services-staging-handler/#contributing","title":"Contributing","text":"<p>Contributions to this project are welcome. If you find issues or have suggestions for improvements, feel free to create an issue or submit a pull request.</p>"},{"location":"reference/apps/services-orchestration/services-staging-handler/#acknowledgments","title":"Acknowledgments","text":"<ul> <li>This project follows the clean architecture pattern as described by Robert C. Martin.</li> <li>RabbitMQ is used for asynchronous messaging.</li> </ul> <p>Feel free to adapt this README file to your specific project's needs and add more details as necessary.</p>"},{"location":"reference/apps/services-orchestration/services-staging-handler/openapi%20copy/","title":"OpenAPI Specification","text":""},{"location":"reference/apps/services-orchestration/services-staging-handler/openapi/","title":"OpenAPI Specification","text":""},{"location":"reference/apps/services-raw-layer/file-downloader/","title":"services-raw-layer-file-downloader","text":"<p>Project description here.</p>"},{"location":"reference/apps/services-raw-layer/file-downloader/code_reference/file_downloader/consumer/consumer/","title":"Consumer","text":""},{"location":"reference/apps/services-raw-layer/file-downloader/code_reference/file_downloader/controller/controller/","title":"Controller","text":""},{"location":"reference/apps/services-raw-layer/file-downloader/code_reference/file_downloader/jobs/job_handler/","title":"Job handler","text":""},{"location":"reference/apps/services-raw-layer/file-downloader/code_reference/file_downloader/jobs/handlers/default/job/","title":"Job","text":""},{"location":"reference/libs/golang/resources/go-minio/","title":"go-minio","text":"<p><code>go-minio</code> is a Go library that simplifies interaction with the MinIO object storage server. It provides a convenient way to work with MinIO buckets and objects, including uploading, downloading, and creating buckets.</p>"},{"location":"reference/libs/golang/resources/go-minio/#usage","title":"Usage","text":""},{"location":"reference/libs/golang/resources/go-minio/#importing-the-package","title":"Importing the Package","text":"<p>Import the <code>go-minio</code> package into your Go code:</p> <pre><code>import gominio \"libs/golang/resources/go-minio/client\"\n</code></pre>"},{"location":"reference/libs/golang/resources/go-minio/#creating-a-minioclient","title":"Creating a MinioClient","text":"<p>You can create a <code>MinioClient</code> by providing the MinIO endpoint, access key, and secret key.</p> <pre><code>minioEndpoint := \"minio:9000\"\nminioAccessKey := \"your-access-key\"\nminioSecretKey := \"your-secret-key\"\n\nclient := gominio.NewMinioClient(minioEndpoint, minioAccessKey, minioSecretKey)\n</code></pre>"},{"location":"reference/libs/golang/resources/go-minio/#downloading-an-object","title":"Downloading an Object","text":"<p>To download an object from a MinIO bucket, use the <code>DownloadFile</code> method. Provide the URI of the object you want to download.</p> <pre><code>uri := \"minio.example.com/mybucket/myobject\"\ncontent, err := client.DownloadFile(uri)\nif err != nil {\n    // Handle the error\n}\n</code></pre>"},{"location":"reference/libs/golang/resources/go-minio/#uploading-a-file","title":"Uploading a File","text":"<p>To upload a file to a MinIO bucket, use the <code>UploadFile</code> method. Provide the bucket name, file name, partition, and the file content as a byte slice.</p> <pre><code>bucketName := \"mybucket\"\nfileName := \"myobject.jpg\"\npartition := \"2023-10-31\"\nfileContent := []byte(\"Your file content here\")\n\npath, err := client.UploadFile(bucketName, fileName, partition, fileContent)\nif err != nil {\n    // Handle the error\n}\n</code></pre>"},{"location":"reference/libs/golang/resources/go-mongo/","title":"go-mongo","text":"<p><code>go-mongo</code> is a Go library that simplifies interaction with the MongoDB database using the official MongoDB Go driver. It provides a convenient way to create, configure, and manage database connections and access MongoDB features in your Go applications.</p>"},{"location":"reference/libs/golang/resources/go-mongo/#usage","title":"Usage","text":""},{"location":"reference/libs/golang/resources/go-mongo/#importing-the-package","title":"Importing the Package","text":"<p>Import the <code>go-mongo</code> package into your Go code:</p> <pre><code>import mongodb \"libs/golang/resources/go-mongo/client\"\n</code></pre>"},{"location":"reference/libs/golang/resources/go-mongo/#creating-a-mongodb-instance","title":"Creating a MongoDB Instance","text":"<p>You can create a MongoDB instance using the <code>NewMongoDB</code> function. Provide the driver, user, password, host, port, database name, and a context.</p> <pre><code>driver := \"mongodb\"\nuser := \"your-username\"\npassword := \"your-password\"\nhost := \"localhost\"\nport := \"27017\"\ndbName := \"your-database\"\nctx := context.TODO()\n\nmongoDB := mongodb.NewMongoDB(driver, user, password, host, port, dbName, ctx)\n</code></pre>"},{"location":"reference/libs/golang/resources/go-mongo/#connecting-to-mongodb","title":"Connecting to MongoDB","text":"<p>To establish a connection with MongoDB, use the <code>Connect</code> method. This method will make multiple attempts to connect, and you can specify the number of attempts and the interval between them. This helps in handling potential connection issues.</p> <pre><code>client, err := mongoDB.Connect()\nif err != nil {\n    // Handle the connection error\n}\ndefer mongoDB.Disconnect(client)\n</code></pre>"},{"location":"reference/libs/golang/resources/go-mongo/#accessing-the-mongodb-client","title":"Accessing the MongoDB Client","text":"<p>Once connected, you can access the MongoDB client for performing database operations:</p> <pre><code>collection := client.Database(dbName).Collection(\"your-collection\")\n</code></pre>"},{"location":"reference/libs/golang/resources/go-mongo/#disconnecting-from-mongodb","title":"Disconnecting from MongoDB","text":"<p>After using the MongoDB client, make sure to disconnect from the database to release resources. Use the <code>Disconnect</code> method for this purpose.</p>"},{"location":"reference/libs/golang/resources/go-mongo/#example","title":"Example","text":"<p>Here is a simple example of how to use <code>go-mongo</code> to connect to MongoDB and perform a basic operation:</p> <pre><code>package main\n\nimport (\n    \"context\"\n    \"fmt\"\n    \"github.com/yourusername/go-mongo\"\n)\n\nfunc main() {\n    driver := \"mongodb\"\n    user := \"your-username\"\n    password := \"your-password\"\n    host := \"localhost\"\n    port := \"27017\"\n    dbName := \"your-database\"\n    ctx := context.TODO()\n\n    mongoDB := mongodb.NewMongoDB(driver, user, password, host, port, dbName, ctx)\n\n    client, err := mongoDB.Connect()\n    if err != nil {\n        fmt.Printf(\"Failed to connect to MongoDB: %v\\n\", err)\n        return\n    }\n    defer mongoDB.Disconnect(client)\n\n    collection := client.Database(dbName).Collection(\"your-collection\")\n    // Perform database operations here\n}\n</code></pre>"},{"location":"reference/libs/golang/resources/go-rabbitmq/","title":"go-rabbitmq","text":"<p><code>go-rabbitmq</code> is a Go library that simplifies interaction with RabbitMQ using the official RabbitMQ Go client library (amqp091-go). It provides a convenient way to create, configure, and manage RabbitMQ connections, channels, and message handling in your Go applications.</p>"},{"location":"reference/libs/golang/resources/go-rabbitmq/#usage","title":"Usage","text":""},{"location":"reference/libs/golang/resources/go-rabbitmq/#importing-the-package","title":"Importing the Package","text":"<p>Import the <code>go-rabbitmq</code> package into your Go code:</p> <pre><code>import \"github.com/yourusername/go-rabbitmq/queue\"\n</code></pre>"},{"location":"reference/libs/golang/resources/go-rabbitmq/#creating-a-rabbitmq-instance","title":"Creating a RabbitMQ Instance","text":"<p>You can create a RabbitMQ instance using the <code>NewRabbitMQ</code> function. Provide the user, password, host, port, vhost, consumer queue name, consumer name, dead-letter exchange name, and protocol.</p> <pre><code>user := \"your-username\"\npassword := \"your-password\"\nhost := \"localhost\"\nport := \"5672\"\nvhost := \"/\"\nconsumerQueueName := \"your-queue\"\nconsumerName := \"your-consumer\"\ndlxName := \"your-dlx\"\nprotocol := \"amqp\"\n\nrabbitMQ := rabbitmq.NewRabbitMQ(user, password, host, port, vhost, consumerQueueName, consumerName, dlxName, protocol)\n</code></pre>"},{"location":"reference/libs/golang/resources/go-rabbitmq/#connecting-to-rabbitmq","title":"Connecting to RabbitMQ","text":"<p>To establish a connection with RabbitMQ, use the <code>Connect</code> method. This method will make multiple attempts to connect, and you can specify the number of attempts and the interval between them. This helps in handling potential connection issues.</p> <pre><code>channel, err := rabbitMQ.Connect()\nif err != nil {\n    // Handle the connection error\n}\ndefer rabbitMQ.Close()\n</code></pre>"},{"location":"reference/libs/golang/resources/go-rabbitmq/#declaring-an-exchange","title":"Declaring an Exchange","text":"<p>You can declare an exchange using the <code>DeclareExchange</code> method. This method checks if the exchange has been declared already and declares it if not.</p> <pre><code>exchangeName := \"your-exchange\"\nexchangeType := \"direct\"\nrabbitMQ.DeclareExchange(exchangeName, exchangeType)\n</code></pre>"},{"location":"reference/libs/golang/resources/go-rabbitmq/#consuming-messages","title":"Consuming Messages","text":"<p>To consume messages from RabbitMQ, use the <code>Consume</code> method. This method sets up a consumer that receives messages from the specified queue and sends them to the provided message channel.</p> <pre><code>messageChannel := make(chan amqp.Delivery)\nexchangeName := \"your-exchange\"\nbindingKey := \"your-binding-key\"\nqueueName := \"your-queue\"\nconsumerName := \"your-consumer\"\ngo rabbitMQ.Consume(messageChannel, exchangeName, bindingKey, queueName, consumerName)\n\nfor message := range messageChannel {\n    // Handle the incoming message\n}\n</code></pre>"},{"location":"reference/libs/golang/resources/go-rabbitmq/#publishing-messages","title":"Publishing Messages","text":"<p>To publish messages to RabbitMQ, use the <code>Notify</code> method. This method allows you to send a message to a specified exchange with the given routing key.</p> <pre><code>message := []byte(\"Your message content\")\ncontentType := \"text/plain\"\nexchange := \"your-exchange\"\nroutingKey := \"your-routing-key\"\n\nerr := rabbitMQ.Notify(message, contentType, exchange, routingKey)\nif err != nil {\n    // Handle the publishing error\n}\n</code></pre>"},{"location":"reference/libs/golang/resources/go-rabbitmq/#example","title":"Example","text":"<p>Here is a simple example of how to use <code>go-rabbitmq</code> to connect to RabbitMQ and consume and publish messages:</p> <pre><code>package main\n\nimport (\n    rabbitmq \"github.com/yourusername/go-rabbitmq/queue\"\n    \"github.com/rabbitmq/amqp091-go\"\n    \"log\"\n)\n\nfunc main() {\n    user := \"your-username\"\n    password := \"your-password\"\n    host := \"localhost\"\n    port := \"5672\"\n    vhost := \"/\"\n    consumerQueueName := \"your-queue\"\n    consumerName := \"your-consumer\"\n    dlxName := \"your-dlx\"\n    protocol := \"amqp\"\n\n    rabbitMQ := rabbitmq.NewRabbitMQ(user, password, host, port, vhost, consumerQueueName, consumerName, dlxName, protocol)\n\n    channel, err := rabbitMQ.Connect()\n    if err != nil {\n        log.Fatalf(\"Failed to connect to RabbitMQ: %v\", err)\n        return\n    }\n    defer rabbitMQ.Close()\n\n    exchangeName := \"your-exchange\"\n    exchangeType := \"direct\"\n    rabbitMQ.DeclareExchange(exchangeName, exchangeType)\n\n    messageChannel := make(chan amqp.Delivery)\n    bindingKey := \"your-binding-key\"\n    queueName := \"your-queue\"\n    consumerName := \"your-consumer\"\n    go rabbitMQ.Consume(messageChannel, exchangeName, bindingKey, queueName, consumerName)\n\n    // Publish a message\n    message := []byte(\"Hello, RabbitMQ!\")\n    contentType := \"text/plain\"\n    exchange := \"your-exchange\"\n    routingKey := \"your-routing-key\"\n\n    err = rabbitMQ.Notify(message, contentType, exchange, routingKey)\n    if err != nil {\n        log.Printf(\"Failed to publish message: %v\", err)\n    }\n\n    for message := range messageChannel {\n        log.Printf(\"Received message: %s\", string(message.Body))\n    }\n}\n</code></pre>"},{"location":"reference/libs/golang/services/api-clients/services-config-handler/","title":"services-config-handler","text":"<p>The <code>services-config-handler</code> API Client is a Go library that allows you to interact with a remote HTTP API for managing configuration data. This client provides a set of methods to perform various operations on configurations, such as creating new configurations, listing all configurations, and retrieving specific configurations by different criteria.</p>"},{"location":"reference/libs/golang/services/api-clients/services-config-handler/#getting-started","title":"Getting Started","text":""},{"location":"reference/libs/golang/services/api-clients/services-config-handler/#creating-a-client","title":"Creating a Client","text":"<p>To create a new instance of the <code>services-config-handler</code> API Client, use the <code>NewClient</code> function. It initializes the client with default configuration:</p> <pre><code>client := configClient.NewClient()\n</code></pre> <p>You can also customize the client's configuration by setting a custom base URL or providing a context.</p>"},{"location":"reference/libs/golang/services/api-clients/services-config-handler/#creating-a-configuration","title":"Creating a Configuration","text":"<p>You can create a new configuration using the <code>CreateConfig</code> method. It takes a <code>ConfigDTO</code> as input and sends a POST request to the API to create a new configuration.</p> <pre><code>configData := inputDTO.ConfigDTO{\n    // Set your configuration details here\n}\n\nconfig, err := client.CreateConfig(configData)\nif err != nil {\n    // Handle the error\n}\n</code></pre>"},{"location":"reference/libs/golang/services/api-clients/services-config-handler/#listing-all-configurations","title":"Listing All Configurations","text":"<p>You can retrieve a list of all configurations using the <code>ListAllConfigs</code> method. It sends a GET request to the API to fetch all available configurations.</p> <pre><code>configList, err := client.ListAllConfigs()\nif err != nil {\n    // Handle the error\n}\n</code></pre>"},{"location":"reference/libs/golang/services/api-clients/services-config-handler/#retrieving-a-configuration-by-id","title":"Retrieving a Configuration by ID","text":"<p>To retrieve a specific configuration by its ID, you can use the <code>ListOneConfigById</code> method. Provide the ID as a parameter, and it will send a GET request to the API to fetch the configuration.</p> <pre><code>configID := \"your-config-id\"\nconfig, err := client.ListOneConfigById(configID)\nif err != nil {\n    // Handle the error\n}\n</code></pre>"},{"location":"reference/libs/golang/services/api-clients/services-config-handler/#listing-configurations-by-service","title":"Listing Configurations by Service","text":"<p>You can retrieve configurations that belong to a specific service using the <code>ListAllConfigsByService</code> method. Provide the service name as a parameter to get the configurations associated with that service.</p> <pre><code>serviceName := \"your-service-name\"\nconfigList, err := client.ListAllConfigsByService(serviceName)\nif err != nil {\n    // Handle the error\n}\n</code></pre>"},{"location":"reference/libs/golang/services/api-clients/services-config-handler/#listing-configurations-by-service-and-context","title":"Listing Configurations by Service and Context","text":"<p>To retrieve configurations based on a specific service and context, use the <code>ListAllConfigsByServiceAndContext</code> method. Provide the service and context as parameters to get the configurations that match these criteria.</p> <pre><code>serviceName := \"your-service-name\"\ncontextEnv := \"your-context\"\nconfigList, err := client.ListAllConfigsByServiceAndContext(serviceName, contextEnv)\nif err != nil {\n    // Handle the error\n}\n</code></pre>"},{"location":"reference/libs/golang/services/api-clients/services-config-handler/#listing-configurations-by-dependent-job","title":"Listing Configurations by Dependent Job","text":"<p>You can retrieve configurations related to a specific service and source (dependent job) using the <code>ListAllConfigsByDependentJob</code> method. Provide the service and source as parameters to get the configurations associated with the given criteria.</p> <pre><code>serviceName := \"your-service-name\"\nsource := \"your-source\"\nconfigList, err := client.ListAllConfigsByDependentJob(serviceName, source)\nif err != nil {\n    // Handle the error\n}\n</code></pre>"},{"location":"reference/libs/golang/services/api-clients/services-config-handler/#error-handling","title":"Error Handling","text":"<p>In case of any errors during API requests, the methods return an error value that you can handle according to your application's needs.</p>"},{"location":"reference/libs/golang/services/api-clients/services-config-handler/#contributing","title":"Contributing","text":"<p>Contributions to this library are welcome. If you find issues or have suggestions for improvements, feel free to create an issue or submit a pull request.</p> <p>Feel free to customize this README to include information specific to your library and its usage.</p>"},{"location":"reference/libs/golang/services/api-clients/services-input-handler/","title":"services-input-handler","text":"<p>The <code>services-input-handler</code> API Client is a Go library that allows you to interact with a remote HTTP API for managing input data. This client provides a set of methods to perform various operations on inputs, such as creating new input, updating an input, listing all inputs, and retrieving specific input by different criteria.</p>"},{"location":"reference/libs/golang/services/api-clients/services-input-handler/#getting-started","title":"Getting Started","text":""},{"location":"reference/libs/golang/services/api-clients/services-input-handler/#creating-a-client","title":"Creating a Client","text":"<p>To create a new instance of the <code>services-input-handler</code> API Client, use the <code>NewClient</code> function. It initializes the client with default configuration:</p> <pre><code>client := inputClient.NewClient()\n</code></pre> <p>You can also customize the client's configuration by setting a custom base URL or providing a context.</p>"},{"location":"reference/libs/golang/services/api-clients/services-input-handler/#creating-an-input","title":"Creating an Input","text":"<p>You can create a new input using the <code>CreateInput</code> method. It takes a <code>InputDTO</code> as input and sends a POST request to the API to create a new input.</p> <pre><code>inputData := inputDTO.InputDTO{\n    // Set your input details here\n}\n\ninput, err := client.CreateConfig(inputData)\nif err != nil {\n    // Handle the error\n}\n</code></pre>"},{"location":"reference/libs/golang/services/api-clients/services-input-handler/#listing-inputs","title":"Listing Inputs","text":"<p>You can retrieve a list of inputs based on various criteria. Here are some examples:</p>"},{"location":"reference/libs/golang/services/api-clients/services-input-handler/#list-all-inputs-by-service-and-source","title":"List All Inputs by Service and Source","text":"<pre><code>inputs, err := client.ListAllInputsByServiceAndSource(\"your-service-name\", \"your-source-name\")\nif err != nil {\n    // Handle the error\n}\n</code></pre>"},{"location":"reference/libs/golang/services/api-clients/services-input-handler/#list-all-inputs-by-service","title":"List All Inputs by Service","text":"<pre><code>inputs, err := client.ListAllInputsByService(\"your-service-name\")\nif err is not nil {\n    // Handle the error\n}\n</code></pre>"},{"location":"reference/libs/golang/services/api-clients/services-input-handler/#list-one-input-by-id-service-and-source","title":"List One Input by ID, Service, and Source","text":"<pre><code>input, err := client.ListOneInputByIdAndService(\"your-input-id\", \"your-service-name\", \"your-source-name\")\nif err != nil {\n    // Handle the error\n}\n</code></pre>"},{"location":"reference/libs/golang/services/api-clients/services-input-handler/#list-all-inputs-by-service-source-and-status","title":"List All Inputs by Service, Source, and Status","text":"<pre><code>inputs, err := client.ListAllInputsByServiceAndSourceAndStatus(\"your-service-name\", \"your-source-name\", your-status)\nif err != nil {\n    // Handle the error\n}\n</code></pre>"},{"location":"reference/libs/golang/services/api-clients/services-input-handler/#updating-input-status","title":"Updating Input Status","text":"<p>You can update the status of an input using the UpdateInputStatus method. It takes the new status, context environment, service name, source name, and input ID as input and sends a POST request to the API to update the input's status.</p> <pre><code>newStatus := sharedDTO.Status{\n    // Set the new status details here\n}\n\nupdatedInput, err := client.UpdateInputStatus(newStatus, \"your-context-environment\", \"your-service-name\", \"your-source-name\", \"your-input-id\")\nif err != nil {\n    // Handle the error\n}\n</code></pre>"},{"location":"reference/libs/golang/services/api-clients/services-input-handler/#error-handling","title":"Error Handling","text":"<p>In case of any errors during API requests, the methods return an error value that you can handle according to your application's needs.</p>"},{"location":"reference/libs/golang/services/api-clients/services-input-handler/#contributing","title":"Contributing","text":"<p>Contributions to this library are welcome. If you find issues or have suggestions for improvements, feel free to create an issue or submit a pull request.</p> <p>Feel free to customize this README to include information specific to your library and its usage.</p>"},{"location":"reference/libs/golang/services/api-clients/services-output-handler/","title":"services-output-handler","text":"<p>The <code>services-output-handler</code> API Client is a Go library that allows you to interact with a remote HTTP API for managing output data. This client provides a set of methods to perform various operations on outputs, such as creating new output, listing all outputs, and retrieving specific output by different criteria.</p>"},{"location":"reference/libs/golang/services/api-clients/services-output-handler/#getting-started","title":"Getting Started","text":""},{"location":"reference/libs/golang/services/api-clients/services-output-handler/#creating-a-client","title":"Creating a Client","text":"<p>To create a new instance of the <code>services-output-handler</code> API Client, use the <code>NewClient</code> function. It initializes the client with default configuration:</p> <pre><code>client := outputClient.NewClient()\n</code></pre> <p>You can also customize the client's configuration by setting a custom base URL or providing a context.</p>"},{"location":"reference/libs/golang/services/api-clients/services-output-handler/#creating-an-input","title":"Creating an Input","text":"<p>You can create a new output using the <code>CreateOutput</code> method. It takes a <code>ServiceOutputDTO</code> as input and sends a POST request to the API to create a new output.</p> <pre><code>outputData := inputDTO.ServiceOutputDTO{\n    // Set your output details here\n}\n\noutput, err := client.CreateOutput(outputData)\nif err != nil {\n    // Handle the error\n}\n</code></pre>"},{"location":"reference/libs/golang/services/api-clients/services-output-handler/#listing-outputs","title":"Listing Outputs","text":"<p>You can retrieve a list of outputs based on various criteria. Here are some examples:</p>"},{"location":"reference/libs/golang/services/api-clients/services-output-handler/#list-all-outputs-by-service-and-source","title":"List All Outputs by Service and Source","text":"<pre><code>outputs, err := client.ListAllOutputsByServiceAndSource(\"your-service-name\", \"your-source-name\")\nif err != nil {\n    // Handle the error\n}\n</code></pre>"},{"location":"reference/libs/golang/services/api-clients/services-output-handler/#list-all-outputs-by-service","title":"List All Outputs by Service","text":"<pre><code>outputs, err := client.ListAllOutputsByService(\"your-service-name\")\nif err is not nil {\n    // Handle the error\n}\n</code></pre>"},{"location":"reference/libs/golang/services/api-clients/services-output-handler/#list-one-output-by-id-service-and-source","title":"List One Output by ID, Service, and Source","text":"<pre><code>outputs, err := client.ListOneOutputsByServiceAndId(\"your-output-id\", \"your-service-name\", \"your-source-name\")\nif err != nil {\n    // Handle the error\n}\n</code></pre>"},{"location":"reference/libs/golang/services/api-clients/services-output-handler/#error-handling","title":"Error Handling","text":"<p>In case of any errors during API requests, the methods return an error value that you can handle according to your application's needs.</p>"},{"location":"reference/libs/golang/services/api-clients/services-output-handler/#contributing","title":"Contributing","text":"<p>Contributions to this library are welcome. If you find issues or have suggestions for improvements, feel free to create an issue or submit a pull request.</p> <p>Feel free to customize this README to include information specific to your library and its usage.</p>"},{"location":"reference/libs/golang/services/api-clients/services-staging-handler/","title":"services-output-handler","text":"<p>The <code>services-staging-handler</code> API Client is a Go library that allows you to interact with a remote HTTP API for managing staging data of processing jobs. This client provides a set of methods to perform various operations on staging data of processing jobs, such as creating new staging data for a dependent job og the actual job running, listing one staging data of processing jobs by id, remove a staging data of processing jobs and update an status of a the running job in the staging data of processing jobs.</p>"},{"location":"reference/libs/golang/services/api-clients/services-staging-handler/#getting-started","title":"Getting Started","text":""},{"location":"reference/libs/golang/services/api-clients/services-staging-handler/#creating-a-client","title":"Creating a Client","text":"<p>To create a new instance of the <code>services-staging-handler</code> API Client, use the <code>NewClient</code> function. It initializes the client with default configuration:</p> <pre><code>client := stagingClient.NewClient()\n</code></pre> <p>You can also customize the client's configuration by setting a custom base URL or providing a context.</p>"},{"location":"reference/libs/golang/services/api-clients/services-staging-handler/#creating-a-processing-job-dependencies","title":"Creating a Processing Job Dependencies","text":"<p>You can create a new staging processing job dependency using the <code>CreateProcessingJobDependencies</code> method. It takes a <code>ProcessingJobDependenciesDTO</code> as input and sends a POST request to the API to create a new processing job dependencies.</p> <pre><code>processingDepData := inputDTO.ProcessingJobDependenciesDTO{\n    // Set your processing job dependencies details here\n}\n\nprocessingDep, err := client.CreateProcessingJobDependencies(processingDepData)\nif err != nil {\n    // Handle the error\n}\n</code></pre>"},{"location":"reference/libs/golang/services/api-clients/services-staging-handler/#list-one-processing-job-dependencies-by-id","title":"List One Processing Job Dependencies by ID","text":"<pre><code>processingDeps, err := client.ListOneProcessingJobDependenciesById(\"your-processing-job-dependencies-id\")\nif err != nil {\n    // Handle the error\n}\n</code></pre>"},{"location":"reference/libs/golang/services/api-clients/services-staging-handler/#remove-a-processing-job-dependencies","title":"Remove a Processing Job Dependencies","text":"<pre><code>processingDeps, err := client.RemoveProcessingJobDependencies(\"your-processing-job-dependencies-id\")\nif err != nil {\n    // Handle the error\n}\n</code></pre>"},{"location":"reference/libs/golang/services/api-clients/services-staging-handler/#update-job-dependencies-of-a-processing-job-dependencies","title":"Update Job Dependencies of a Processing Job Dependencies","text":"<pre><code>processingDepData := sharedDTO.ProcessingJobDependencies{\n    // Set your processing job dependencies details here\n}\n\nprocessingDeps, err := client.UpdateProcessingJobDependencies(\"your-processing-job-dependencies-id\")\nif err != nil {\n    // Handle the error\n}\n</code></pre>"},{"location":"reference/libs/golang/services/api-clients/services-staging-handler/#error-handling","title":"Error Handling","text":"<p>In case of any errors during API requests, the methods return an error value that you can handle according to your application's needs.</p>"},{"location":"reference/libs/golang/services/api-clients/services-staging-handler/#contributing","title":"Contributing","text":"<p>Contributions to this library are welcome. If you find issues or have suggestions for improvements, feel free to create an issue or submit a pull request.</p> <p>Feel free to customize this README to include information specific to your library and its usage.</p>"},{"location":"reference/libs/golang/services/dtos/services-config-handler/","title":"services-config-handler","text":"<p>The <code>services-config-handler</code> library contains Data Transfer Objects (DTOs) for the <code>services-config-handler</code> service. These DTOs are used to define the structure of data exchanged between different parts of the service, providing a clear and standardized representation of data.</p>"},{"location":"reference/libs/golang/services/dtos/services-config-handler/#usage","title":"Usage","text":"<p>To use the DTOs provided by this library, import the necessary package in your Go code. You can then create instances of these DTOs to work with data in a structured and consistent way.</p>"},{"location":"reference/libs/golang/services/dtos/services-config-handler/#importing-the-library","title":"Importing the Library","text":"<p>Import the library in your Go code as follows:</p> <pre><code>import \"libs/golang/services/dtos/services-config-handler/input\"\nimport \"libs/golang/services/dtos/services-config-handler/output\"\nimport \"libs/golang/services/dtos/services-config-handler/shared\"\n</code></pre>"},{"location":"reference/libs/golang/services/dtos/services-config-handler/#using-the-dtos","title":"Using the DTOs","text":"<p>You can use the DTOs in your code to represent and work with data structures related to the <code>services-config-handler</code> service.</p>"},{"location":"reference/libs/golang/services/dtos/services-config-handler/#example","title":"Example:","text":"<pre><code>import (\n    inputDTO \"libs/golang/services/dtos/services-config-handler/input\"\n    \"encoding/json\"\n    \"fmt\"\n)\n\nfunc main() {\n    // Create a ConfigDTO instance\n    config := inputDTO.ConfigDTO{\n        Name:      \"Sample Config\",\n        Active:    true,\n        Frequency: \"daily\",\n        Service:   \"sample-service\",\n        // ... other fields\n    }\n\n    // Convert the ConfigDTO to JSON\n    configJSON, err := json.Marshal(config)\n    if err != nil {\n        fmt.Println(\"Error marshaling JSON:\", err)\n        return\n    }\n\n    fmt.Println(\"ConfigDTO JSON:\", string(configJSON))\n}\n</code></pre>"},{"location":"reference/libs/golang/services/dtos/services-config-handler/#dtos-provided","title":"DTOs Provided","text":"<p>The library provides the following DTOs for use in the <code>services-config-handler</code> service:</p>"},{"location":"reference/libs/golang/services/dtos/services-config-handler/#configdto-input-and-output-packages","title":"<code>ConfigDTO</code> (input and output packages)","text":"<p>This DTO represents the configuration for a service, including various attributes such as name, service parameters, and job parameters. It is used for both input and output data.</p>"},{"location":"reference/libs/golang/services/dtos/services-config-handler/#configversiondata-input-and-output-packages","title":"<code>ConfigVersionData</code> (input and output packages)","text":"<p>This DTO represents data related to a specific configuration version, including the ConfigID and the corresponding ConfigDTO. It is used for both input and output data.</p>"},{"location":"reference/libs/golang/services/dtos/services-config-handler/#configversiondto-input-and-output-packages","title":"<code>ConfigVersionDTO</code> (input and output packages)","text":"<p>This DTO represents a collection of configuration versions associated with a specific ID. It includes an ID and a list of <code>ConfigVersionData</code> instances. It is used for both input and output data.</p>"},{"location":"reference/libs/golang/services/dtos/services-config-handler/#jobdependencies-shared-package","title":"<code>JobDependencies</code> (shared package)","text":"<p>This DTO represents job dependencies with service and source attributes. It is used to define dependencies between jobs.</p> <p>Please refer to the Go code and documentation for further details on the structure and usage of these DTOs.</p>"},{"location":"reference/libs/golang/services/dtos/services-config-handler/#contributions","title":"Contributions","text":"<p>Contributions to this library are welcome. If you find issues, have suggestions for improvements, or want to add new features, feel free to create an issue or submit a pull request.</p>"},{"location":"reference/libs/golang/services/dtos/services-events-handler/","title":"services-events-handler","text":"<p>The <code>services-events-handler</code> library contains Data Transfer Objects (DTOs) for the <code>services-events-handler</code> service. These DTOs are used to define the structure of data exchanged between different parts of the service, providing a clear and standardized representation of data.</p>"},{"location":"reference/libs/golang/services/dtos/services-events-handler/#usage","title":"Usage","text":"<p>To use the DTOs provided by this library, import the necessary package in your Go code. You can then create instances of these DTOs to work with data in a structured and consistent way.</p>"},{"location":"reference/libs/golang/services/dtos/services-events-handler/#importing-the-library","title":"Importing the Library","text":"<p>Import the library in your Go code as follows:</p> <pre><code>import \"libs/golang/services/dtos/services-events-handler/input\"\nimport \"libs/golang/services/dtos/services-events-handler/output\"\nimport \"libs/golang/services/dtos/services-events-handler/shared\"\n</code></pre>"},{"location":"reference/libs/golang/services/dtos/services-events-handler/#using-the-dtos","title":"Using the DTOs","text":"<p>You can use the DTOs in your code to represent and work with data structures related to the <code>services-events-handler</code> service.</p>"},{"location":"reference/libs/golang/services/dtos/services-events-handler/#example","title":"Example:","text":"<pre><code>package main\n\nimport (\n    \"encoding/json\"\n    \"fmt\"\n    inputDTO \"libs/golang/services/dtos/services-events-handler/input\"\n    outputDTO \"libs/golang/services/dtos/services-events-handler/output\"\n    sharedDTO \"libs/golang/services/dtos/services-events-handler/shared\"\n)\n\nfunc main() {\n    // Create a sample input ServiceFeedbackDTO\n    inputFeedback := inputDTO.ServiceFeedbackDTO{\n        Data: map[string]interface{}{\n            \"param1\": \"value1\",\n            \"param2\": 42,\n        },\n        Metadata: sharedDTO.Metadata{\n            Input: sharedDTO.MetadataInput{\n                ID:                  \"input123\",\n                Data:                map[string]interface{}{\"inputParam\": \"inputValue\"},\n                ProcessingId:        \"process123\",\n                ProcessingTimestamp: \"2023-11-02T12:34:56\",\n                InputSchemaId:       \"schema123\",\n            },\n            Service:             \"example-service\",\n            Source:              \"example-source\",\n            Context:             \"example-context\",\n            ProcessingTimestamp: \"2023-11-02T12:34:56\",\n            JobFrequency:        \"daily\",\n            JobConfigId:         \"config123\",\n        },\n        Status: sharedDTO.Status{\n            Code: 200,\n            Detail: \"OK\"\n        },\n    }\n\n    // Convert the ConfigDTO to JSON\n    inputFeedbackJSON, err := json.Marshal(inputFeedback)\n    if err != nil {\n        fmt.Println(\"Error marshaling JSON:\", err)\n        return\n    }\n\n    fmt.Println(\"ConfigDTO JSON:\", string(inputFeedbackJSON))\n\n}\n</code></pre>"},{"location":"reference/libs/golang/services/dtos/services-events-handler/#dtos-provided","title":"DTOs Provided","text":"<p>The library provides the following DTOs for use in the <code>services-events-handler</code> service:</p>"},{"location":"reference/libs/golang/services/dtos/services-events-handler/#servicefeedbackdto-input-and-output","title":"<code>ServiceFeedbackDTO</code> (input and output)","text":"<p>This DTO represents the feedback for a service, including various attributes such as name, service parameters, and job parameters. It is used for both input and output data.</p>"},{"location":"reference/libs/golang/services/dtos/services-events-handler/#metadatainput-shared","title":"<code>MetadataInput</code> (shared)","text":"<p>This DTO represents metadata related to the input data, including ID, data, processing ID, processing timestamp, and input schema ID.</p>"},{"location":"reference/libs/golang/services/dtos/services-events-handler/#metadata-shared","title":"<code>Metadata</code> (shared)","text":"<p>This DTO represents general metadata, including input metadata, service name, source, context, processing timestamp, job frequency, and job config ID.</p>"},{"location":"reference/libs/golang/services/dtos/services-events-handler/#status-shared","title":"<code>Status</code> (shared)","text":"<p>This DTO represents the status of a service feedback, including a status code and a detailed description.</p> <p>Please refer to the Go code and documentation for further details on the structure and usage of these DTOs.</p>"},{"location":"reference/libs/golang/services/dtos/services-events-handler/#contributions","title":"Contributions","text":"<p>Contributions to this library are welcome. If you find issues, have suggestions for improvements, or want to add new features, feel free to create an issue or submit a pull request.</p>"},{"location":"reference/libs/golang/services/dtos/services-input-handler/","title":"services-input-handler","text":"<p>The <code>services-input-handler</code> library contains Data Transfer Objects (DTOs) for the <code>services-input-handler</code> service. These DTOs are used to define the structure of data exchanged between different parts of the service, providing a clear and standardized representation of data.</p>"},{"location":"reference/libs/golang/services/dtos/services-input-handler/#usage","title":"Usage","text":"<p>To use the DTOs provided by this library, import the necessary package in your Go code. You can then create instances of these DTOs to work with data in a structured and consistent way.</p>"},{"location":"reference/libs/golang/services/dtos/services-input-handler/#importing-the-library","title":"Importing the Library","text":"<p>Import the library in your Go code as follows:</p> <pre><code>import \"libs/golang/services/dtos/services-input-handler/input\"\nimport \"libs/golang/services/dtos/services-input-handler/output\"\nimport \"libs/golang/services/dtos/services-input-handler/shared\"\n</code></pre>"},{"location":"reference/libs/golang/services/dtos/services-input-handler/#using-the-dtos","title":"Using the DTOs","text":"<p>You can use the DTOs in your code to represent and work with data structures related to the <code>services-input-handler</code> service.</p> <p>Here's an example of how to use the <code>InputDTO</code> from the input package:</p> <pre><code>import (\n    inputDTO \"libs/golang/services/dtos/services-input-handler/input\"\n    \"encoding/json\"\n    \"fmt\"\n)\n\nfunc main() {\n    // Create an InputDTO instance\n    data := map[string]interface{}{\n        \"key1\": \"value1\",\n        \"key2\": 42,\n    }\n\n    input := inputDTO.InputDTO{\n        Data: data,\n    }\n\n    // Convert to JSON for output or further processing\n    jsonBytes, err := json.Marshal(input)\n    if err != nil {\n        fmt.Println(\"Error:\", err)\n        return\n    }\n\n    fmt.Println(string(jsonBytes))\n}\n</code></pre>"},{"location":"reference/libs/golang/services/dtos/services-input-handler/#dtos-provided","title":"DTOs Provided","text":"<p>The library provides the following DTOs for use in the <code>services-input-handler</code> service:</p>"},{"location":"reference/libs/golang/services/dtos/services-input-handler/#inputdto-input-and-output","title":"<code>InputDTO</code> (input and output)","text":"<p>This DTO represents the main data structure exchanged by the service, including data.</p>"},{"location":"reference/libs/golang/services/dtos/services-input-handler/#metadata-shared","title":"<code>Metadata</code> (shared)","text":"<p>This DTO includes metadata information, such as processing ID, processing timestamp, context, source, and service.</p>"},{"location":"reference/libs/golang/services/dtos/services-input-handler/#status-shared","title":"<code>Status</code> (shared)","text":"<p>The <code>Status</code> DTO contains information about the status of the input, including a status code and a detail message.</p> <p>Please refer to the Go code and documentation for further details on the structure and usage of these DTOs.</p>"},{"location":"reference/libs/golang/services/dtos/services-input-handler/#contributions","title":"Contributions","text":"<p>Contributions to this library are welcome. If you find issues, have suggestions for improvements, or want to add new features, feel free to create an issue or submit a pull request. Your contributions will help improve the library for all users.</p>"},{"location":"reference/libs/golang/services/dtos/services-output-handler/","title":"services-output-handler","text":"<p>The <code>services-output-handler</code> library contains Data Transfer Objects (DTOs) for the <code>services-output-handler</code> service. These DTOs are used to define the structure of data exchanged between different parts of the service, providing a clear and standardized representation of data.</p>"},{"location":"reference/libs/golang/services/dtos/services-output-handler/#usage","title":"Usage","text":"<p>To use the DTOs provided by this library, import the necessary package in your Go code. You can then create instances of these DTOs to work with data in a structured and consistent way.</p>"},{"location":"reference/libs/golang/services/dtos/services-output-handler/#importing-the-library","title":"Importing the Library","text":"<p>Import the library in your Go code as follows:</p> <pre><code>import \"libs/golang/services/dtos/services-output-handler/input\"\nimport \"libs/golang/services/dtos/services-output-handler/output\"\nimport \"libs/golang/services/dtos/services-output-handler/shared\"\n</code></pre>"},{"location":"reference/libs/golang/services/dtos/services-output-handler/#using-the-dtos","title":"Using the DTOs","text":"<p>You can use the DTOs in your code to represent and work with data structures related to the <code>services-output-handler</code> service.</p> <p>Here's an example of how to use the <code>ServiceOutputDTO</code> from the input package:</p> <pre><code>import (\n    inputDTO \"libs/golang/services/dtos/services-output-handler/input\"\n    \"encoding/json\"\n    \"fmt\"\n)\n\nfunc main() {\n    // Create a ServiceOutputDTO instance\n    data := map[string]interface{}{\n        \"key1\": \"value1\",\n        \"key2\": 42,\n    }\n\n    metadata := sharedDTO.Metadata{\n        InputId: \"input123\",\n        Input: sharedDTO.MetadataInput{\n            ID:                  \"metadataId\",\n            Data:                map[string]interface{}{\"metaKey\": \"metaValue\"},\n            ProcessingId:        \"processing123\",\n            ProcessingTimestamp: \"2023-11-01T12:00:00Z\",\n        },\n        Service: \"my-service\",\n        Source:  \"my-source\",\n    }\n\n    serviceOutput := inputDTO.ServiceOutputDTO{\n        Data:     data,\n        Metadata: metadata,\n        Context:  \"my-context\",\n    }\n\n    // Convert to JSON for output or further processing\n    jsonBytes, err := json.Marshal(serviceOutput)\n    if err != nil {\n        fmt.Println(\"Error:\", err)\n        return\n    }\n\n    fmt.Println(string(jsonBytes))\n}\n</code></pre>"},{"location":"reference/libs/golang/services/dtos/services-output-handler/#dtos-provided","title":"DTOs Provided","text":"<p>The library provides the following DTOs for use in the <code>services-output-handler</code> service:</p>"},{"location":"reference/libs/golang/services/dtos/services-output-handler/#serviceoutputdto-input-and-output","title":"<code>ServiceOutputDTO</code> (input and output)","text":"<p>This DTO is used for input and output and represents the main data structure exchanged by the service. It includes data, metadata, and context information.</p>"},{"location":"reference/libs/golang/services/dtos/services-output-handler/#metadatainput-shared","title":"<code>MetadataInput</code> (shared)","text":"<p>This DTO represents the metadata for input data. It includes information like ID, data, processing ID, and processing timestamp.</p>"},{"location":"reference/libs/golang/services/dtos/services-output-handler/#metadata-shared","title":"<code>Metadata</code> (shared)","text":"<p>This DTO represents the metadata associated with the service output. It includes input ID, input metadata, service, source, and more.</p>"},{"location":"reference/libs/golang/services/dtos/services-output-handler/#contributions","title":"Contributions","text":"<p>Contributions to this library are welcome. If you find issues, have suggestions for improvements, or want to add new features, feel free to create an issue or submit a pull request.</p>"},{"location":"reference/libs/golang/services/dtos/services-schema-handler/","title":"services-schema-handler","text":"<p>The <code>services-schema-handler</code> library contains Data Transfer Objects (DTOs) for the <code>services-schema-handler</code> service. These DTOs are used to define the structure of data exchanged between different parts of the service, providing a clear and standardized representation of data.</p>"},{"location":"reference/libs/golang/services/dtos/services-schema-handler/#usage","title":"Usage","text":"<p>To use the DTOs provided by this library, import the necessary package in your Go code. You can then create instances of these DTOs to work with data in a structured and consistent way.</p>"},{"location":"reference/libs/golang/services/dtos/services-schema-handler/#importing-the-library","title":"Importing the Library","text":"<p>Import the library in your Go code as follows:</p> <pre><code>import \"libs/golang/services/dtos/services-schema-handler/input\"\nimport \"libs/golang/services/dtos/services-schema-handler/output\"\n</code></pre>"},{"location":"reference/libs/golang/services/dtos/services-schema-handler/#using-the-dtos","title":"Using the DTOs","text":"<p>You can use the DTOs in your code to represent and work with data structures related to the <code>services-schema-handler</code> service.</p>"},{"location":"reference/libs/golang/services/dtos/services-schema-handler/#example","title":"Example:","text":"<pre><code>// Import the necessary packages\nimport (\n    \"libs/golang/services/dtos/services-schema-handler/input\"\n    \"libs/golang/services/dtos/services-schema-handler/output\"\n)\n\n// Create instances of DTOs\nschemaInputDTO := input.SchemaDTO{\n    SchemaType: \"example\",\n    Service: \"sample-service\",\n    Source: \"sample-source\",\n    Context: \"sample-context\",\n    JsonSchema: map[string]interface{}{\n        \"key1\": \"value1\",\n        \"key2\": \"value2\",\n    },\n}\n\nschemaOutputDTO := output.SchemaDTO{\n    ID: \"12345\",\n    SchemaType: \"example\",\n    Service: \"sample-service\",\n    Source: \"sample-source\",\n    Context: \"sample-context\",\n    JsonSchema: map[string]interface{}{\n        \"key1\": \"value1\",\n        \"key2\": \"value2\",\n    },\n    SchemaID: \"67890\",\n    CreatedAt: \"2023-11-01T12:00:00Z\",\n    UpdatedAt: \"2023-11-01T12:30:00Z\",\n}\n\n// Use the DTOs as needed in your code\n</code></pre>"},{"location":"reference/libs/golang/services/dtos/services-schema-handler/#dtos-provided","title":"DTOs Provided","text":"<p>The library provides the following DTOs for use in the <code>services-schema-handler</code> service:</p>"},{"location":"reference/libs/golang/services/dtos/services-schema-handler/#schemadto-input-and-output","title":"<code>SchemaDTO</code> (input and output)","text":"<p>This DTO represents schema information and includes attributes such as <code>SchemaType</code>, <code>Service</code>, <code>Source</code>, <code>Context</code>, and <code>JsonSchema</code>.</p>"},{"location":"reference/libs/golang/services/dtos/services-schema-handler/#schemaversiondata-input-and-output","title":"<code>SchemaVersionData</code> (input and output)","text":"<p>This DTO represents data related to schema versions and includes attributes like <code>SchemaID</code> and a reference to the <code>SchemaDTO</code>.</p>"},{"location":"reference/libs/golang/services/dtos/services-schema-handler/#schemaversiondto-input-and-output","title":"<code>SchemaVersionDTO</code> (input and output)","text":"<p>This DTO represents schema versions and includes attributes like <code>ID</code> and a list of <code>SchemaVersionData</code>.</p> <p>Please refer to the Go code and documentation for further details on the structure and usage of these DTOs.</p>"},{"location":"reference/libs/golang/services/dtos/services-schema-handler/#contributions","title":"Contributions","text":"<p>Contributions to this library are welcome. If you find issues, have suggestions for improvements, or want to add new features, feel free to create an issue or submit a pull request.</p>"},{"location":"reference/libs/golang/services/dtos/services-staging-handler/","title":"services-staging-handler","text":"<p>The <code>services-staging-handler</code> library contains Data Transfer Objects (DTOs) for the <code>services-staging-handler</code> service. These DTOs are used to define the structure of data exchanged between different parts of the service, providing a clear and standardized representation of data.</p>"},{"location":"reference/libs/golang/services/dtos/services-staging-handler/#usage","title":"Usage","text":"<p>To use the DTOs provided by this library, import the necessary package in your Go code. You can then create instances of these DTOs to work with data in a structured and consistent way.</p>"},{"location":"reference/libs/golang/services/dtos/services-staging-handler/#importing-the-library","title":"Importing the Library","text":"<p>Import the library in your Go code as follows:</p> <pre><code>import \"libs/golang/services/dtos/services-staging-handler/input\"\nimport \"libs/golang/services/dtos/services-staging-handler/staging\"\nimport \"libs/golang/services/dtos/services-staging-handler/shared\"\n</code></pre>"},{"location":"reference/libs/golang/services/dtos/services-staging-handler/#using-the-dtos","title":"Using the DTOs","text":"<p>You can use the DTOs in your code to represent and work with data structures related to the <code>services-staging-handler</code> service.</p> <p>Here's an example of how to use the <code>ProcessingJobDependenciesDTO</code> from the input package:</p> <pre><code>import (\n    inputDTO \"libs/golang/services/dtos/services-staging-handler/input\"\n    \"encoding/json\"\n    \"fmt\"\n)\n\nfunc main() {\n    // Create a ProcessingJobDependenciesDTO instance\n    jobDependencies := []sharedDTO.ProcessingJobDependencies{\n        {\n            Service:             \"dependency-service-1\",\n            Source:              \"source-1\",\n            ProcessingId:        \"process-1\",\n            ProcessingTimestamp: \"2023-11-01T12:00:00Z\",\n            StatusCode:          200,\n        },\n        {\n            Service:             \"dependency-service-2\",\n            Source:              \"source-2\",\n            ProcessingId:        \"process-2\",\n            ProcessingTimestamp: \"2023-11-01T13:00:00Z\",\n            StatusCode:          404,\n        },\n    }\n\n    processingJob := inputDTO.ProcessingJobDependenciesDTO{\n        Service:         \"my-service\",\n        Source:          \"my-source\",\n        Context:         \"my-context\",\n        JobDependencies: jobDependencies,\n    }\n\n    // Convert to JSON for output or further processing\n    jsonBytes, err := json.Marshal(processingJob)\n    if err != nil {\n        fmt.Println(\"Error:\", err)\n        return\n    }\n\n    fmt.Println(string(jsonBytes))\n}\n</code></pre>"},{"location":"reference/libs/golang/services/dtos/services-staging-handler/#dtos-provided","title":"DTOs Provided","text":"<p>The library provides the following DTOs for use in the <code>services-staging-handler</code> service:</p>"},{"location":"reference/libs/golang/services/dtos/services-staging-handler/#processingjobdependenciesdto-input-and-staging","title":"<code>ProcessingJobDependenciesDTO</code> (input and staging)","text":"<p>This DTO is used for input and staging and represents the data structure exchanged by the service. It includes information about the service, source, context, and an array of job dependencies.</p>"},{"location":"reference/libs/golang/services/dtos/services-staging-handler/#processingjobdependencies-shared","title":"<code>ProcessingJobDependencies</code> (shared)","text":"<p>This DTO represents the shared information about job dependencies, including service, source, processing ID, processing timestamp, and status code.</p>"},{"location":"reference/libs/golang/services/dtos/services-staging-handler/#metadata-shared","title":"<code>Metadata</code> (shared)","text":"<p>This shared DTO may be used for additional metadata when working with the <code>services-staging-handler</code> service.</p>"},{"location":"reference/libs/golang/services/dtos/services-staging-handler/#contributions","title":"Contributions","text":"<p>Contributions to this library are welcome. If you find issues, have suggestions for improvements, or want to add new features, feel free to create an issue or submit a pull request. Your contributions will help improve the library for all users.</p>"},{"location":"reference/libs/golang/shared/go-events/","title":"go-events","text":"<p>The <code>go-events</code> package provides a simple event handling mechanism for your Go applications. It allows you to define and manage events, event handlers, and event listeners. This can be particularly useful for implementing event-driven architectures and decoupling different parts of your application.</p>"},{"location":"reference/libs/golang/shared/go-events/#usage","title":"Usage","text":""},{"location":"reference/libs/golang/shared/go-events/#event-interface","title":"Event Interface","text":"<p>The EventInterface defines the methods that should be implemented by event objects:</p> <ul> <li><code>GetName() string</code>: Returns the name of the event.</li> <li><code>GetDateTime() time.Time</code>: Returns the date and time when the event occurred.</li> <li><code>GetPayload() interface{}</code>: Returns the event's payload.</li> <li><code>SetPayload(payload interface{})</code>: Sets the event's payload.</li> </ul>"},{"location":"reference/libs/golang/shared/go-events/#event-handler-interface","title":"Event Handler Interface","text":"<p>The <code>EventHandlerInterface</code> defines the method for handling events:</p> <ul> <li><code>Handle(event EventInterface, wg *sync.WaitGroup, exchangeName string, routingKey string)</code>: Handles the event, and you can specify the exchange name and routing key for further customization.</li> </ul>"},{"location":"reference/libs/golang/shared/go-events/#event-listener-interface","title":"Event Listener Interface","text":"<p>The <code>EventListenerInterface</code> defines the method for listening to events:</p> <ul> <li><code>Handle(event EventInterface, wg *sync.WaitGroup)</code>: Handles the event and can be used in scenarios where you don't need to specify exchange names or routing keys.</li> </ul>"},{"location":"reference/libs/golang/shared/go-events/#event-dispatcher-interface","title":"Event Dispatcher Interface","text":"<p>The <code>EventDispatcherInterface</code> defines methods for registering, dispatching, removing, and checking event handlers:</p> <ul> <li><code>Register(eventName string, handler EventHandlerInterface) error</code>: Registers an event handler for a specific event.</li> <li><code>Dispatch(event EventInterface, exchangeName string, routingKey string) error</code>: Dispatches an event to all registered handlers, optionally specifying the exchange name and routing key.</li> <li><code>Remove(eventName string, handler EventHandlerInterface) error</code>: Removes a specific event handler.</li> <li><code>Has(eventName string, handler EventHandlerInterface) bool</code>: Checks if a specific event handler is registered for an event.</li> <li><code>Clear()</code>: Removes all registered event handlers.</li> </ul>"},{"location":"reference/libs/golang/shared/go-events/#eventdispatcher","title":"EventDispatcher","text":"<p>The <code>EventDispatcher</code> struct implements the <code>EventDispatcherInterface</code> and provides a simple way to manage event handlers and dispatch events.</p> <pre><code>import \"libs/golang/shared/go-events/events\"\n\ned := events.NewEventDispatcher()\n\n// Register an event handler\ned.Register(\"myEvent\", myHandler)\n\n// Dispatch an event\ned.Dispatch(myEvent, \"myExchange\", \"myRoutingKey\")\n\n// Remove an event handler\ned.Remove(\"myEvent\", myHandler)\n\n// Check if an event handler is registered\nif ed.Has(\"myEvent\", myHandler) {\n    // Handler is registered\n}\n\n// Clear all event handlers\ned.Clear()\n</code></pre>"},{"location":"reference/libs/golang/shared/go-id/","title":"go-id","text":"<p>The <code>go-id</code> library provides utilities for generating and working with various types of identifiers (IDs) used in your Go applications. These IDs are designed to uniquely identify objects, schemas, or configurations within your systems.</p>"},{"location":"reference/libs/golang/shared/go-id/#usage","title":"Usage","text":""},{"location":"reference/libs/golang/shared/go-id/#configuration-id","title":"Configuration ID","text":"<p>The <code>config</code> package provides tools for creating configuration-related IDs. You can use it as follows:</p> <pre><code>import \"libs/golang/shared/go-id/config\"\n\n// Create a new configuration ID\nid := config.NewID(\"my-service\", \"my-source\")\n</code></pre>"},{"location":"reference/libs/golang/shared/go-id/#md5-id","title":"MD5 ID","text":"<p>The <code>md5</code> package allows you to generate MD5-based IDs for data and provides additional functionality for including source and service information:</p> <pre><code>import \"libs/golang/shared/go-id/md5\"\n\n// Create an MD5 ID from a map of data\ndata := map[string]interface{}{\"key1\": \"value1\", \"key2\": \"value2\"}\nid := md5.NewID(data)\n\n// Create an MD5 ID with source information\nidWithSource := md5.NewWithSourceID(data, \"my-source\")\n\n// Create an MD5 ID with both source and service information\nidWithSourceAndService := md5.NewWithSourceAndServiceID(data, \"my-source\", \"my-service\")\n</code></pre>"},{"location":"reference/libs/golang/shared/go-id/#schema-id","title":"Schema ID","text":"<p>The <code>schema</code> package helps you generate schema-related IDs based on schema type, service, and source:</p> <pre><code>import \"libs/golang/shared/go-id/schema\"\n\n// Create a schema ID\nschemaID := schema.NewID(\"user\", \"my-service\", \"my-source\")\n</code></pre>"},{"location":"reference/libs/golang/shared/go-id/#uuid-id","title":"UUID ID","text":"<p>The <code>uuid</code> package provides tools for working with UUID-based IDs:</p> <pre><code>import \"libs/golang/shared/go-id/uuid\"\n\n// Create a new UUID ID\nid := uuid.NewID()\n\n// Parse a UUID ID from a string\nparsedID, err := uuid.ParseID(\"7c9e6679-327c-43f8-9b2c-0d33d6d735f7\")\n</code></pre>"},{"location":"reference/libs/golang/shared/go-request/","title":"go-request","text":"<p>The <code>go-request</code> library provides utilities for making HTTP requests and handling responses in your Go applications. It simplifies the process of creating HTTP requests, sending them, and handling the responses. It is designed to make interacting with HTTP services easier and more convenient.</p>"},{"location":"reference/libs/golang/shared/go-request/#usage","title":"Usage","text":""},{"location":"reference/libs/golang/shared/go-request/#creating-requests","title":"Creating Requests","text":"<p>The CreateRequest function allows you to create HTTP requests with ease. It takes a context, HTTP method, URL, and an optional request body. Here's how to use it:</p> <pre><code>import gorequest \"libs/golang/shared/go-request/request\"\n\nctx := context.Background()\nmethod := \"POST\"\nurl := \"https://example.com\"\nbody := map[string]string{\"key\": \"value\"}\n\nreq, err := gorequest.CreateRequest(ctx, method, url, body)\nif err != nil {\n    log.Fatalf(\"CreateRequest() failed: %v\", err)\n}\n</code></pre>"},{"location":"reference/libs/golang/shared/go-request/#sending-requests","title":"Sending Requests","text":"<p>The <code>SendRequest</code> function simplifies sending HTTP requests and handling responses. It takes an HTTP request, an HTTP client (you can use the provided <code>DefaultHTTPClient</code> or create your own), and a result structure for the response. Here's how to use it:</p> <pre><code>import gorequest \"libs/golang/shared/go-request/request\"\n\nctx := context.Background()\nmethod := \"GET\"\nurl := \"https://example.com\"\nvar result map[string]interface{}\n\nreq, err := gorequest.CreateRequest(ctx, method, url, nil)\nif err != nil {\n    log.Fatalf(\"CreateRequest() failed: %v\", err)\n}\n\nclient := gorequest.DefaultHTTPClient\n\nerr = gorequest.SendRequest(req, client, &amp;result)\nif err != nil {\n    log.Fatalf(\"SendRequest() failed: %v\", err)\n}\n</code></pre>"},{"location":"reference/libs/python/resources/py-minio/","title":"py-minio","text":"<p><code>py-minio</code> is a Python library that provides a client class for interacting with a Minio server. It allows you to create buckets, upload and download objects, list buckets and objects, and generate URIs for accessing objects on a Minio server.</p>"},{"location":"reference/libs/python/resources/py-minio/#features","title":"Features","text":"<ul> <li>Create new buckets on the Minio server.</li> <li>List all available buckets on the Minio server.</li> <li>Upload files to a specified bucket.</li> <li>Upload bytes data to a specified bucket.</li> <li>Download files from a specified bucket.</li> <li>List objects in a specified bucket.</li> <li>Generate URIs for accessing objects on the Minio server.</li> </ul>"},{"location":"reference/libs/python/resources/py-minio/#installation","title":"Installation","text":"<p>You can install <code>py-minio</code> using <code>nx</code>:</p> <pre><code>npx nx add &lt;project&gt; --name python-resources-py-minio --local\n</code></pre>"},{"location":"reference/libs/python/resources/py-minio/#examples","title":"Examples","text":"<p>Here's an example of how to use py-minio:</p> <pre><code>from pyminio.client import MinioClient\n\n# Initialize the Minio client\nminio = MinioClient(endpoint=\"http://minio.example.com\", access_key=\"your_access_key\", secret_key=\"your_secret_key\")\n\n# Create a new bucket\nminio.create_bucket(\"my_bucket\")\n\n# Upload a file to the bucket\nminio.upload_file(\"my_bucket\", \"example.txt\", \"path/to/local/file.txt\")\n\n# List objects in the bucket\nobjects = minio.list_objects(\"my_bucket\")\nprint(objects)\n</code></pre>"},{"location":"reference/libs/python/resources/py-minio/#configuration","title":"Configuration","text":"<p>Before using the <code>py-minio</code> library, make sure to configure the Minio server connection with valid credentials and an endpoint URL. You can pass these details when initializing the <code>MinioClient</code>.</p>"},{"location":"reference/libs/python/resources/py-minio/#api-reference","title":"API Reference","text":"<p><code>create_bucket(bucket_name)</code>: Create a new bucket on the Minio server. <code>list_buckets()</code>: List all buckets available on the Minio server. <code>upload_file(bucket_name, object_name, file_path)</code>: Upload a file to a specified bucket on the Minio server. <code>upload_bytes(bucket_name, object_name, bytes_data)</code>: Upload bytes data to a specified bucket on the Minio server. <code>download_file(bucket_name, object_name, file_path)</code>: Download a file from a specified bucket on the Minio server and save it locally. <code>list_objects(bucket_name)</code>: List objects in a specified bucket on the Minio server.</p>"},{"location":"reference/libs/python/resources/py-minio/#note","title":"Note","text":"<p>Make sure to configure the Minio server connection with valid credentials and an endpoint URL before using the methods of this class.</p>"},{"location":"reference/libs/python/resources/py-rabbitmq/","title":"py-rabbitmq","text":"<p><code>py-rabbitmq</code> is a Python library that simplifies interaction with RabbitMQ using asynchronous Python libraries. It provides a base class for handling RabbitMQ connections and a consumer class for consuming messages from RabbitMQ queues.</p>"},{"location":"reference/libs/python/resources/py-rabbitmq/#installation","title":"Installation","text":"<p>You can install <code>py-rabbitmq</code> using <code>nx</code>:</p> <pre><code>npx nx add &lt;project&gt; --name python-resources-py-rabbitmq --local\n</code></pre>"},{"location":"reference/libs/python/resources/py-rabbitmq/#usage","title":"Usage","text":"<p>The <code>RabbitMQConsumer</code> class is used for consuming messages from RabbitMQ queues. It extends the <code>BaseRabbitMQ</code> class. The <code>BaseRabbitMQ</code> class is a base class for interacting with RabbitMQ. It provides methods for connecting to RabbitMQ, creating channels, declaring exchanges, creating queues, and publishing messages.</p>"},{"location":"reference/libs/python/resources/py-rabbitmq/#examples","title":"Examples","text":"<pre><code>import asyncio\nfrom pylog.log import setup_logging\nimport aio_pika\nfrom pyrabbitmq.consumer import RabbitMQConsumer\n\nlogger = setup_logging(__name__)\n\n# Define a callback function to process incoming messages\nasync def process_message(message):\n    body = message.body.decode()\n    logger.info(f\"Received message: {body}\")\n\n# Create a RabbitMQConsumer instance\nasync def main():\n    consumer = RabbitMQConsumer()\n\n    # Establish a connection to RabbitMQ\n    await consumer.connect()\n\n    # Create a channel\n    channel = await consumer.create_channel()\n\n    # Define the queue name and routing key\n    queue_name = \"my_queue\"\n    exchange_name = \"my_exchange\"\n    routing_key = \"my_routing_key\"\n\n    # Create a queue and bind it to the exchange\n    queue = await consumer.create_queue(channel, queue_name, exchange_name, routing_key)\n\n    # Start listening for messages\n    await consumer.listen(queue, process_message)\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n</code></pre>"},{"location":"reference/libs/python/resources/py-rabbitmq/code_reference/pyrabbitmq/base/","title":"Base","text":""},{"location":"reference/libs/python/resources/py-rabbitmq/code_reference/pyrabbitmq/base/#libs.python.resources.py-rabbitmq.pyrabbitmq.base.BaseRabbitMQ","title":"<code>BaseRabbitMQ</code>","text":"<p>A base class for interacting with RabbitMQ.</p> <p>Attributes:</p> Name Type Description <code>_sd</code> <p>The service discovery instance.</p> <code>url</code> <p>The RabbitMQ connection URL.</p> <code>connection</code> <p>The RabbitMQ connection.</p> <code>exchange</code> <p>The RabbitMQ exchange.</p> <p>Methods:</p> Name Description <code>__init__</code> <p>Initialize the BaseRabbitMQ object.</p> <code>_connect</code> <p>Connect to RabbitMQ.</p> <code>connect</code> <p>Retry connecting to RabbitMQ until successful.</p> <code>on_connection_error</code> <p>Handle connection errors.</p> <code>create_channel</code> <p>Create a new channel in the RabbitMQ connection.</p> <code>declare_exchange</code> <p>Declare a RabbitMQ exchange.</p> <code>create_queue</code> <p>Create a RabbitMQ queue and bind it to an exchange.</p> <code>close_connection</code> <p>Close the RabbitMQ connection.</p> <code>publish_message</code> <p>Publish a message to a RabbitMQ exchange.</p> Source code in <code>libs/python/resources/py-rabbitmq/pyrabbitmq/base.py</code> <pre><code>class BaseRabbitMQ:\n    \"\"\"A base class for interacting with RabbitMQ.\n\n    Args:\n        None\n\n    Attributes:\n        _sd: The service discovery instance.\n        url: The RabbitMQ connection URL.\n        connection: The RabbitMQ connection.\n        exchange: The RabbitMQ exchange.\n\n    Methods:\n        __init__: Initialize the BaseRabbitMQ object.\n        _connect: Connect to RabbitMQ.\n        connect: Retry connecting to RabbitMQ until successful.\n        on_connection_error: Handle connection errors.\n        create_channel: Create a new channel in the RabbitMQ connection.\n        declare_exchange: Declare a RabbitMQ exchange.\n        create_queue: Create a RabbitMQ queue and bind it to an exchange.\n        close_connection: Close the RabbitMQ connection.\n        publish_message: Publish a message to a RabbitMQ exchange.\n\n    \"\"\"\n    def __init__(self) -&gt; None:\n        self._sd = new_from_env()\n        self.url = self._sd.rabbitmq_endpoint()\n        self.connection = None\n        self.exchange = None\n\n    async def _connect(self) -&gt; None:\n        \"\"\"Connect to RabbitMQ.\n\n        Args:\n            None\n\n        Returns:\n            None\n\n        \"\"\"\n        parsed_url = urllib.parse.urlparse(self.url)\n        self.connection = await aio_pika.connect(\n            host=parsed_url.hostname,\n            port=parsed_url.port,\n            login=parsed_url.username,\n            password=parsed_url.password,\n        )\n\n    async def connect(self) -&gt; None:\n        \"\"\"Retry connecting to RabbitMQ until successful.\n\n        Args:\n            None\n\n        Returns:\n            None\n\n        \"\"\"\n        while True:\n            try:\n                await self._connect()\n                break\n            except Exception as err:\n                logger.error('[CONNECTION] - Could not connect to RabbitMQ, retrying in 2 seconds...')\n                self.on_connection_error(err)\n                await asyncio.sleep(2)\n\n    def on_connection_error(self, error: Exception) -&gt; None:\n        \"\"\"Handle connection errors.\n\n        Args:\n            error (Exception): The connection error.\n\n        Returns:\n            None\n\n        \"\"\"\n        logger.error(f\"Connection error: {error}\")\n        logger.error(f\"Connection parameters: {self.url}\")\n\n    async def create_channel(self) -&gt; aio_pika.Channel:\n        channel = await self.connection.channel()\n        await channel.set_qos(prefetch_count=1)\n        return channel\n\n    async def declare_exchange(self, channel: aio_pika.Channel, exchange_name: str) -&gt; None:\n        \"\"\"Declare a RabbitMQ exchange.\n\n        Args:\n            channel (aio_pika.Channel): The channel to declare the exchange on.\n            exchange_name (str): The name of the exchange.\n\n        Returns:\n            None\n\n        \"\"\"\n        self.exchange = await channel.declare_exchange(\n            exchange_name, aio_pika.ExchangeType.TOPIC, durable=True\n        )\n\n    async def create_queue(self, channel: aio_pika.Channel, queue_name: str, exchange_name: str, routing_key: str) -&gt; aio_pika.Queue:\n        \"\"\"Create a RabbitMQ queue and bind it to an exchange.\n\n        Args:\n            channel (aio_pika.Channel): The channel to create the queue on.\n            queue_name (str): The name of the queue.\n            exchange_name (str): The name of the exchange to bind the queue to.\n            routing_key (str): The routing key to use for binding.\n\n        Returns:\n            aio_pika.Queue: The created queue.\n\n        \"\"\"\n        await self.declare_exchange(channel, exchange_name)\n        queue = await channel.declare_queue(queue_name, durable=True)\n        await queue.bind(self.exchange, routing_key)\n\n        return queue\n\n    async def close_connection(self) -&gt; None:\n        \"\"\"Close the RabbitMQ connection.\n\n        Args:\n            None\n\n        Returns:\n            None\n\n        \"\"\"\n        if self.connection is not None:\n            await self.connection.close()\n            self.connection = None\n\n    async def publish_message(self, exchange_name: str, routing_key: str, message: str) -&gt; None:\n        \"\"\"Publish a message to a RabbitMQ exchange.\n\n        Args:\n            exchange_name (str): The name of the exchange to publish to.\n            routing_key (str): The routing key for the message.\n            message (str): The message to publish.\n\n        Returns:\n            None\n\n        \"\"\"\n        try:\n            await self.exchange.publish(\n                aio_pika.Message(\n                    body=message.encode(),\n                    delivery_mode=aio_pika.DeliveryMode.PERSISTENT,\n                ),\n                routing_key=routing_key,\n            )\n            logger.info(f\"Published message to exchange '{exchange_name}' with routing key '{routing_key}'\")\n        except Exception as e:\n            logger.error(f\"Error while publishing message: {e}\")\n</code></pre>"},{"location":"reference/libs/python/resources/py-rabbitmq/code_reference/pyrabbitmq/base/#libs.python.resources.py-rabbitmq.pyrabbitmq.base.BaseRabbitMQ.connect","title":"<code>connect()</code>  <code>async</code>","text":"<p>Retry connecting to RabbitMQ until successful.</p> <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>libs/python/resources/py-rabbitmq/pyrabbitmq/base.py</code> <pre><code>async def connect(self) -&gt; None:\n    \"\"\"Retry connecting to RabbitMQ until successful.\n\n    Args:\n        None\n\n    Returns:\n        None\n\n    \"\"\"\n    while True:\n        try:\n            await self._connect()\n            break\n        except Exception as err:\n            logger.error('[CONNECTION] - Could not connect to RabbitMQ, retrying in 2 seconds...')\n            self.on_connection_error(err)\n            await asyncio.sleep(2)\n</code></pre>"},{"location":"reference/libs/python/resources/py-rabbitmq/code_reference/pyrabbitmq/base/#libs.python.resources.py-rabbitmq.pyrabbitmq.base.BaseRabbitMQ.on_connection_error","title":"<code>on_connection_error(error)</code>","text":"<p>Handle connection errors.</p> <p>Parameters:</p> Name Type Description Default <code>error</code> <code>Exception</code> <p>The connection error.</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>libs/python/resources/py-rabbitmq/pyrabbitmq/base.py</code> <pre><code>def on_connection_error(self, error: Exception) -&gt; None:\n    \"\"\"Handle connection errors.\n\n    Args:\n        error (Exception): The connection error.\n\n    Returns:\n        None\n\n    \"\"\"\n    logger.error(f\"Connection error: {error}\")\n    logger.error(f\"Connection parameters: {self.url}\")\n</code></pre>"},{"location":"reference/libs/python/resources/py-rabbitmq/code_reference/pyrabbitmq/base/#libs.python.resources.py-rabbitmq.pyrabbitmq.base.BaseRabbitMQ.declare_exchange","title":"<code>declare_exchange(channel, exchange_name)</code>  <code>async</code>","text":"<p>Declare a RabbitMQ exchange.</p> <p>Parameters:</p> Name Type Description Default <code>channel</code> <code>Channel</code> <p>The channel to declare the exchange on.</p> required <code>exchange_name</code> <code>str</code> <p>The name of the exchange.</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>libs/python/resources/py-rabbitmq/pyrabbitmq/base.py</code> <pre><code>async def declare_exchange(self, channel: aio_pika.Channel, exchange_name: str) -&gt; None:\n    \"\"\"Declare a RabbitMQ exchange.\n\n    Args:\n        channel (aio_pika.Channel): The channel to declare the exchange on.\n        exchange_name (str): The name of the exchange.\n\n    Returns:\n        None\n\n    \"\"\"\n    self.exchange = await channel.declare_exchange(\n        exchange_name, aio_pika.ExchangeType.TOPIC, durable=True\n    )\n</code></pre>"},{"location":"reference/libs/python/resources/py-rabbitmq/code_reference/pyrabbitmq/base/#libs.python.resources.py-rabbitmq.pyrabbitmq.base.BaseRabbitMQ.create_queue","title":"<code>create_queue(channel, queue_name, exchange_name, routing_key)</code>  <code>async</code>","text":"<p>Create a RabbitMQ queue and bind it to an exchange.</p> <p>Parameters:</p> Name Type Description Default <code>channel</code> <code>Channel</code> <p>The channel to create the queue on.</p> required <code>queue_name</code> <code>str</code> <p>The name of the queue.</p> required <code>exchange_name</code> <code>str</code> <p>The name of the exchange to bind the queue to.</p> required <code>routing_key</code> <code>str</code> <p>The routing key to use for binding.</p> required <p>Returns:</p> Type Description <code>Queue</code> <p>aio_pika.Queue: The created queue.</p> Source code in <code>libs/python/resources/py-rabbitmq/pyrabbitmq/base.py</code> <pre><code>async def create_queue(self, channel: aio_pika.Channel, queue_name: str, exchange_name: str, routing_key: str) -&gt; aio_pika.Queue:\n    \"\"\"Create a RabbitMQ queue and bind it to an exchange.\n\n    Args:\n        channel (aio_pika.Channel): The channel to create the queue on.\n        queue_name (str): The name of the queue.\n        exchange_name (str): The name of the exchange to bind the queue to.\n        routing_key (str): The routing key to use for binding.\n\n    Returns:\n        aio_pika.Queue: The created queue.\n\n    \"\"\"\n    await self.declare_exchange(channel, exchange_name)\n    queue = await channel.declare_queue(queue_name, durable=True)\n    await queue.bind(self.exchange, routing_key)\n\n    return queue\n</code></pre>"},{"location":"reference/libs/python/resources/py-rabbitmq/code_reference/pyrabbitmq/base/#libs.python.resources.py-rabbitmq.pyrabbitmq.base.BaseRabbitMQ.close_connection","title":"<code>close_connection()</code>  <code>async</code>","text":"<p>Close the RabbitMQ connection.</p> <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>libs/python/resources/py-rabbitmq/pyrabbitmq/base.py</code> <pre><code>async def close_connection(self) -&gt; None:\n    \"\"\"Close the RabbitMQ connection.\n\n    Args:\n        None\n\n    Returns:\n        None\n\n    \"\"\"\n    if self.connection is not None:\n        await self.connection.close()\n        self.connection = None\n</code></pre>"},{"location":"reference/libs/python/resources/py-rabbitmq/code_reference/pyrabbitmq/base/#libs.python.resources.py-rabbitmq.pyrabbitmq.base.BaseRabbitMQ.publish_message","title":"<code>publish_message(exchange_name, routing_key, message)</code>  <code>async</code>","text":"<p>Publish a message to a RabbitMQ exchange.</p> <p>Parameters:</p> Name Type Description Default <code>exchange_name</code> <code>str</code> <p>The name of the exchange to publish to.</p> required <code>routing_key</code> <code>str</code> <p>The routing key for the message.</p> required <code>message</code> <code>str</code> <p>The message to publish.</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>libs/python/resources/py-rabbitmq/pyrabbitmq/base.py</code> <pre><code>async def publish_message(self, exchange_name: str, routing_key: str, message: str) -&gt; None:\n    \"\"\"Publish a message to a RabbitMQ exchange.\n\n    Args:\n        exchange_name (str): The name of the exchange to publish to.\n        routing_key (str): The routing key for the message.\n        message (str): The message to publish.\n\n    Returns:\n        None\n\n    \"\"\"\n    try:\n        await self.exchange.publish(\n            aio_pika.Message(\n                body=message.encode(),\n                delivery_mode=aio_pika.DeliveryMode.PERSISTENT,\n            ),\n            routing_key=routing_key,\n        )\n        logger.info(f\"Published message to exchange '{exchange_name}' with routing key '{routing_key}'\")\n    except Exception as e:\n        logger.error(f\"Error while publishing message: {e}\")\n</code></pre>"},{"location":"reference/libs/python/resources/py-rabbitmq/code_reference/pyrabbitmq/consumer/","title":"Consumer","text":""},{"location":"reference/libs/python/resources/py-rabbitmq/code_reference/pyrabbitmq/consumer/#libs.python.resources.py-rabbitmq.pyrabbitmq.consumer.RabbitMQConsumer","title":"<code>RabbitMQConsumer</code>","text":"<p>             Bases: <code>BaseRabbitMQ</code></p> <p>A RabbitMQ consumer class that extends BaseRabbitMQ.</p> <p>Methods:</p> Name Description <code>__init__</code> <p>Initialize the RabbitMQConsumer object.</p> <code>listen</code> <p>Asynchronously listen to a queue and call the callback function on message arrival.</p> Source code in <code>libs/python/resources/py-rabbitmq/pyrabbitmq/consumer.py</code> <pre><code>class RabbitMQConsumer(BaseRabbitMQ):\n    \"\"\"A RabbitMQ consumer class that extends BaseRabbitMQ.\n\n    Args:\n        None\n\n    Attributes:\n        None\n\n    Methods:\n        __init__: Initialize the RabbitMQConsumer object.\n        listen: Asynchronously listen to a queue and call the callback function on message arrival.\n\n    \"\"\"\n    def __init__(self):\n        super().__init__()\n\n    async def listen(self, queue: aio_pika.Queue, callback: callable) -&gt; None:\n        \"\"\"Listen to a RabbitMQ queue and call the specified callback on message arrival.\n\n        Args:\n            queue (aio_pika.Queue): The queue to listen to.\n            callback (callable): The callback function to execute on message arrival.\n\n        Returns:\n            None\n\n        \"\"\"\n        async with queue.iterator() as queue_iter:\n            message: aio_pika.AbstractIncomingMessage\n            async for message in queue_iter:\n                await callback(message)\n</code></pre>"},{"location":"reference/libs/python/resources/py-rabbitmq/code_reference/pyrabbitmq/consumer/#libs.python.resources.py-rabbitmq.pyrabbitmq.consumer.RabbitMQConsumer.listen","title":"<code>listen(queue, callback)</code>  <code>async</code>","text":"<p>Listen to a RabbitMQ queue and call the specified callback on message arrival.</p> <p>Parameters:</p> Name Type Description Default <code>queue</code> <code>Queue</code> <p>The queue to listen to.</p> required <code>callback</code> <code>callable</code> <p>The callback function to execute on message arrival.</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>libs/python/resources/py-rabbitmq/pyrabbitmq/consumer.py</code> <pre><code>async def listen(self, queue: aio_pika.Queue, callback: callable) -&gt; None:\n    \"\"\"Listen to a RabbitMQ queue and call the specified callback on message arrival.\n\n    Args:\n        queue (aio_pika.Queue): The queue to listen to.\n        callback (callable): The callback function to execute on message arrival.\n\n    Returns:\n        None\n\n    \"\"\"\n    async with queue.iterator() as queue_iter:\n        message: aio_pika.AbstractIncomingMessage\n        async for message in queue_iter:\n            await callback(message)\n</code></pre>"},{"location":"reference/libs/python/services/api-clients/services-config-handler/","title":"service-config-handler","text":"<p><code>service-config-handler</code> is a Python library that provides a client for interacting with a service configuration management system. It allows you to create, list, and retrieve configuration data for various services.</p>"},{"location":"reference/libs/python/services/api-clients/services-config-handler/#installation","title":"Installation","text":"<p>You can install <code>service-config-handler</code> using <code>nx</code>:</p> <pre><code>npx nx add &lt;project&gt; --name python-services-api-clients-services-config-handler --local\n</code></pre>"},{"location":"reference/libs/python/services/api-clients/services-config-handler/#usage","title":"Usage","text":""},{"location":"reference/libs/python/services/api-clients/services-config-handler/#initializing-the-client","title":"Initializing the Client","text":"<p>You can initialize the client by providing the base URL of your service configuration management system.</p> <pre><code>config_handler_client = async_py_config_handler_client()\n</code></pre>"},{"location":"reference/libs/python/services/api-clients/services-config-handler/#creating-a-configuration","title":"Creating a Configuration","text":"<p>To create a new configuration, use the <code>create_config</code> method, passing a dictionary of configuration data.</p> <pre><code>data = {\n    \"key\": \"value\",\n    \"another_key\": \"another_value\"\n}\nnew_config = await config_handler_client.create_config(data)\n</code></pre>"},{"location":"reference/libs/python/services/api-clients/services-config-handler/#listing-all-configurations","title":"Listing All Configurations","text":"<p>To list all configurations, use the <code>list_all_configs</code> method.</p> <pre><code>configs = await config_handler_client.list_all_configs()\n</code></pre>"},{"location":"reference/libs/python/services/api-clients/services-config-handler/#listing-a-configuration-by-id","title":"Listing a Configuration by ID","text":"<p>To retrieve a specific configuration by its ID, use the <code>list_one_config_by_id</code> method.</p> <pre><code>config_id = \"your_config_id\"\nconfig = await config_handler_client.list_one_config_by_id(config_id)\n</code></pre>"},{"location":"reference/libs/python/services/api-clients/services-config-handler/#listing-configurations-by-service","title":"Listing Configurations by Service","text":"<p>To retrieve all configurations associated with a specific service, use the <code>list_all_configs_by_service</code> method.</p> <pre><code>service_name = \"your_service_name\"\nservice_configs = await config_handler_client.list_all_configs_by_service(service_name)\n</code></pre>"},{"location":"reference/libs/python/services/api-clients/services-config-handler/#listing-configurations-by-service-and-context","title":"Listing Configurations by Service and Context","text":"<p>To retrieve configurations associated with a specific service and context, use the <code>list_all_configs_by_service_and_context</code> method.</p> <pre><code>service_name = \"your_service_name\"\ncontext = \"your_context\"\nservice_context_configs = await config_handler_client.list_all_configs_by_service_and_context(service_name, context)\n</code></pre>"},{"location":"reference/libs/python/services/api-clients/services-config-handler/#service-discovery","title":"Service Discovery","text":"<p>The library also provides a convenient function <code>async_py_config_handler_client</code> to create a client using service discovery. This function automatically retrieves the base URL from your environment using <code>new_from_env()</code>.</p> <pre><code>config_handler_client = async_py_config_handler_client()\n</code></pre> <p>Make sure to set up your service discovery environment variables before using this function.</p>"},{"location":"reference/libs/python/services/api-clients/services-config-handler/#contributing","title":"Contributing","text":"<p>Contributions to this library are welcome. If you find issues, have suggestions for improvements, or want to add new features, feel free to create an issue or submit a pull request. Your contributions will help improve the library for all users.</p>"},{"location":"reference/libs/python/services/api-clients/services-schema-handler/","title":"service-schema-handler","text":"<p><code>service-schema-handler</code> is a Python library that provides a client for interacting with a service configuration management system. It allows you to create, list, and retrieve configuration data for various services.</p>"},{"location":"reference/libs/python/services/api-clients/services-schema-handler/#installation","title":"Installation","text":"<p>You can install <code>service-schema-handler</code> using <code>nx</code>:</p> <pre><code>npx nx add &lt;project&gt; --name python-services-api-clients-services-schema-handler --local\n</code></pre>"},{"location":"reference/libs/python/services/api-clients/services-schema-handler/#usage","title":"Usage","text":""},{"location":"reference/libs/python/services/api-clients/services-schema-handler/#initializing-the-client","title":"Initializing the Client","text":"<p>You can initialize the client by providing the base URL of your service configuration management system.</p> <pre><code>schema_handler_client = async_py_schema_handler_client()\n</code></pre>"},{"location":"reference/libs/python/services/api-clients/services-schema-handler/#listing-a-schema-by-service-source-and-schema-type","title":"Listing a schema by Service, Source and Schema Type","text":"<p>To retrieve a specific configuration by its ID, use the <code>list_one_schema_by_service_n_source_n_schema_type</code> method.</p> <pre><code>service_name = \"your_service_name\"\nsource_name = \"your_source_name\"\nschema_type = \"your_schema_type\"\nconfig = await config_handler_client.list_one_schema_by_service_n_source_n_schema_type(\n    service_name,\n    source_name,\n    schema_type\n)\n</code></pre>"},{"location":"reference/libs/python/services/api-clients/services-schema-handler/#listing-a-schema-by-context-service-source-and-schema-type","title":"Listing a schema by Context, Service, Source and Schema Type","text":"<p>To retrieve a specific configuration by its ID, use the <code>list_one_schema_by_service_n_source_n_context_n_schema_type</code> method.</p> <pre><code>context_name = \"your_context_name\"\nservice_name = \"your_service_name\"\nsource_name = \"your_source_name\"\nschema_type = \"your_schema_type\"\nconfig = await config_handler_client.list_one_schema_by_service_n_source_n_context_n_schema_type(\n    context_name,\n    service_name,\n    source_name,\n    schema_type\n)\n</code></pre>"},{"location":"reference/libs/python/services/api-clients/services-schema-handler/#service-discovery","title":"Service Discovery","text":"<p>The library also provides a convenient function <code>async_py_schema_handler_client</code> to create a client using service discovery. This function automatically retrieves the base URL from your environment using <code>new_from_env()</code>.</p> <pre><code>config_handler_client = async_py_schema_handler_client()\n</code></pre> <p>Make sure to set up your service discovery environment variables before using this function.</p>"},{"location":"reference/libs/python/services/api-clients/services-schema-handler/#contributing","title":"Contributing","text":"<p>Contributions to this library are welcome. If you find issues, have suggestions for improvements, or want to add new features, feel free to create an issue or submit a pull request. Your contributions will help improve the library for all users.</p>"},{"location":"reference/libs/python/services/dtos/services-config-handler/","title":"services-config-handler","text":"<p>The <code>services-config-handler</code> library contains Data Transfer Objects (DTOs) for the <code>services-config-handler</code> service. These DTOs are used to define the structure of data exchanged between different parts of the service, providing a clear and standardized representation of data.</p>"},{"location":"reference/libs/python/services/dtos/services-config-handler/#usage","title":"Usage","text":"<p>To use the DTOs provided by this library, import the necessary package in your Python code. You can then create instances of these DTOs to work with data in a structured and consistent way.</p>"},{"location":"reference/libs/python/services/dtos/services-config-handler/#importing-the-library","title":"Importing the Library","text":"<p>Import the library in your python code as follows:</p> <pre><code>from dto_config_handler.output import InputDTO\nfrom dto_config_handler.shared import StatusDTO, MetadataDTO\n</code></pre>"},{"location":"reference/libs/python/services/dtos/services-config-handler/#using-the-dtos","title":"Using the DTOs","text":"<p>You can use the DTOs in your code to represent and work with data structures related to the <code>services-config-handler</code> service.</p> <p>Here's an example of how to use the <code>ConfigDTO</code> from the output package:</p> <pre><code>from dto_config_handler.output import ConfigDTO\nfrom dto_config_handler.shared import JobDependencies\n\n# Create an instance of ConfigDTO with sample data\nconfig_data = ConfigDTO(\n    id=\"12345\",\n    name=\"SampleConfig\",\n    active=True,\n    frequency=\"daily\",\n    service=\"services-config-handler\",\n    source=\"user\",\n    context=\"example\",\n    config_id=\"67890\",\n    depends_on=[\n        JobDependencies(service=\"dependency-service\", source=\"dependency-source\"),\n        JobDependencies(service=\"another-service\", source=\"another-source\"),\n    ],\n    service_parameters={\n        \"param1\": \"value1\",\n        \"param2\": \"value2\",\n    },\n    job_parameters={\n        \"job_param1\": \"job_value1\",\n        \"job_param2\": \"job_value2\",\n    }\n)\n\n# Access the properties within the ConfigDTO\nprint(\"ID:\", config_data.id)\nprint(\"Name:\", config_data.name)\nprint(\"Active:\", config_data.active)\nprint(\"Frequency:\", config_data.frequency)\nprint(\"Service:\", config_data.service)\nprint(\"Source:\", config_data.source)\nprint(\"Context:\", config_data.context)\nprint(\"Config ID:\", config_data.config_id)\nprint(\"Depends On:\", config_data.depends_on)\nprint(\"Service Parameters:\", config_data.service_parameters)\nprint(\"Job Parameters:\", config_data.job_parameters)\n</code></pre>"},{"location":"reference/libs/python/services/dtos/services-config-handler/#dtos-provided","title":"DTOs Provided","text":"<p>The library provides the following DTOs for use in the <code>services-config-handler</code> service:</p>"},{"location":"reference/libs/python/services/dtos/services-config-handler/#configdto-output","title":"<code>ConfigDTO</code> (output)","text":"<p>This DTO represents the main data structure exchanged by the service, including data.</p>"},{"location":"reference/libs/python/services/dtos/services-config-handler/#jobdependencies-shared","title":"<code>JobDependencies</code> (shared)","text":"<p>This DTO includes the previous job dependency if exist</p>"},{"location":"reference/libs/python/services/dtos/services-config-handler/#contributions","title":"Contributions","text":"<p>Contributions to this library are welcome. If you find issues, have suggestions for improvements, or want to add new features, feel free to create an issue or submit a pull request. Your contributions will help improve the library for all users.</p>"},{"location":"reference/libs/python/services/dtos/services-config-handler/code_reference/dto_config_handler/shared/","title":"Shared","text":""},{"location":"reference/libs/python/services/dtos/services-events-handler/","title":"services-events-handler","text":"<p>The <code>services-events-handler</code> library contains Data Transfer Objects (DTOs) for the <code>services-events-handler</code> service. These DTOs are used to define the structure of data exchanged between different parts of the service, providing a clear and standardized representation of data.</p>"},{"location":"reference/libs/python/services/dtos/services-events-handler/#usage","title":"Usage","text":"<p>To use the DTOs provided by this library, import the necessary package in your Python code. You can then create instances of these DTOs to work with data in a structured and consistent way.</p>"},{"location":"reference/libs/python/services/dtos/services-events-handler/#importing-the-library","title":"Importing the Library","text":"<p>Import the library in your python code as follows:</p> <pre><code>from dto_events_handler.output import ServiceFeedbackDTO\nfrom dto_input_hadto_events_handlerndler.shared import StatusDTO, MetadataInputDTO, MetadataDTO\n</code></pre>"},{"location":"reference/libs/python/services/dtos/services-events-handler/#using-the-dtos","title":"Using the DTOs","text":"<p>You can use the DTOs in your code to represent and work with data structures related to the <code>services-events-handler</code> service.</p> <p>Here's an example of how to use the <code>ServiceFeedbackDTO</code> from the output package:</p> <pre><code>from dto_events_handler.output import ServiceFeedbackDTO\nfrom dto_events_handler.shared import StatusDTO, MetadataInputDTO, MetadataDTO\n\n# Create instances of the DTOs\nfeedback_data = {\n    \"key1\": \"value1\",\n    \"key2\": \"value2\"\n}\nmetadata_input = MetadataInputDTO(\n    id=\"123\",\n    data={\"input_key\": \"input_value\"},\n    processing_id=\"456\",\n    processing_timestamp=\"2023-11-02T14:30:00\",\n    input_schema_id=\"789\"\n)\nmetadata = MetadataDTO(\n    input=metadata_input,\n    service=\"example-service\",\n    source=\"example-source\",\n    context=\"example-context\",\n    processing_timestamp=\"2023-11-02T14:30:00\",\n    job_frequency=\"daily\",\n    job_config_id=\"101\"\n)\nstatus = StatusDTO(code=200, detail=\"OK\")\n\nfeedback_dto = ServiceFeedbackDTO(data=feedback_data, metadata=metadata, status=status)\n\n# Now you can work with the feedback DTO\nprint(feedback_dto.data)\nprint(feedback_dto.metadata.input.id)\nprint(feedback_dto.status.code)\n</code></pre>"},{"location":"reference/libs/python/services/dtos/services-events-handler/#dtos-provided","title":"DTOs Provided","text":"<p>The library provides the following DTOs for use in the <code>services-events-handler</code> service:</p>"},{"location":"reference/libs/python/services/dtos/services-events-handler/#servicefeedbackdto-output","title":"<code>ServiceFeedbackDTO</code> (output)","text":"<p>This DTO represents the main data structure exchanged by the service, including data.</p>"},{"location":"reference/libs/python/services/dtos/services-events-handler/#metadatadto-shared","title":"<code>MetadataDTO</code> (shared)","text":"<p>This DTO includes metadata information around the input, such as processing ID, processing timestamp, context, source, service and job config version id.</p>"},{"location":"reference/libs/python/services/dtos/services-events-handler/#metadatainputdto-shared","title":"<code>MetadataInputDTO</code> (shared)","text":"<p>This DTO includes metadata information around the output, such as processing timestamp, context, source, service and schema input version id.</p>"},{"location":"reference/libs/python/services/dtos/services-events-handler/#statusdto-shared","title":"<code>StatusDTO</code> (shared)","text":"<p>The <code>StatusDTO</code> DTO contains information about the status of the input, including a status code and a detail message.</p>"},{"location":"reference/libs/python/services/dtos/services-events-handler/#contributions","title":"Contributions","text":"<p>Contributions to this library are welcome. If you find issues, have suggestions for improvements, or want to add new features, feel free to create an issue or submit a pull request. Your contributions will help improve the library for all users.</p>"},{"location":"reference/libs/python/services/dtos/services-events-handler/code_reference/dto_events_handler/shared/","title":"Shared","text":""},{"location":"reference/libs/python/services/dtos/services-input-handler/","title":"services-input-handler","text":"<p>The <code>services-input-handler</code> library contains Data Transfer Objects (DTOs) for the <code>services-input-handler</code> service. These DTOs are used to define the structure of data exchanged between different parts of the service, providing a clear and standardized representation of data.</p>"},{"location":"reference/libs/python/services/dtos/services-input-handler/#usage","title":"Usage","text":"<p>To use the DTOs provided by this library, import the necessary package in your Python code. You can then create instances of these DTOs to work with data in a structured and consistent way.</p>"},{"location":"reference/libs/python/services/dtos/services-input-handler/#importing-the-library","title":"Importing the Library","text":"<p>Import the library in your python code as follows:</p> <pre><code>from dto_input_handler.output import InputDTO\nfrom dto_input_handler.shared import StatusDTO, MetadataDTO\n</code></pre>"},{"location":"reference/libs/python/services/dtos/services-input-handler/#using-the-dtos","title":"Using the DTOs","text":"<p>You can use the DTOs in your code to represent and work with data structures related to the <code>services-input-handler</code> service.</p> <p>Here's an example of how to use the <code>InputDTO</code> from the output package:</p> <pre><code>from dto_input_handler.output import InputDTO\nfrom dto_input_handler.shared import StatusDTO, MetadataDTO\n\n# Create an InputDTO object\ninput_data = InputDTO(\n    data={\n        \"key1\": \"value1\",\n        \"key2\": \"value2\",\n    },\n    status=StatusDTO(\n        code=200,\n        message=\"Success\",\n    ),\n    metadata=MetadataDTO(\n        processing_id=12345,\n        processing_timestamp=\"2023-11-02T15:30:00\",\n        context=\"example\",\n        source=\"user\",\n        service=\"services-input-handler\",\n    )\n)\n\n# Access the data within the InputDTO\nprint(\"Data: \", input_data.data)\nprint(\"Status Code: \", input_data.status.code)\nprint(\"Status Message: \", input_data.status.message)\nprint(\"Processing ID: \", input_data.metadata.processing_id)\nprint(\"Processing Timestamp: \", input_data.metadata.processing_timestamp)\nprint(\"Context: \", input_data.metadata.context)\nprint(\"Source: \", input_data.metadata.source)\nprint(\"Service: \", input_data.metadata.service)\n</code></pre>"},{"location":"reference/libs/python/services/dtos/services-input-handler/#dtos-provided","title":"DTOs Provided","text":"<p>The library provides the following DTOs for use in the <code>services-input-handler</code> service:</p>"},{"location":"reference/libs/python/services/dtos/services-input-handler/#inputdto-output","title":"<code>InputDTO</code> (output)","text":"<p>This DTO represents the main data structure exchanged by the service, including data.</p>"},{"location":"reference/libs/python/services/dtos/services-input-handler/#metadatadto-shared","title":"<code>MetadataDTO</code> (shared)","text":"<p>This DTO includes metadata information, such as processing ID, processing timestamp, context, source, and service.</p>"},{"location":"reference/libs/python/services/dtos/services-input-handler/#statusdto-shared","title":"<code>StatusDTO</code> (shared)","text":"<p>The <code>StatusDTO</code> DTO contains information about the status of the input, including a status code and a detail message.</p>"},{"location":"reference/libs/python/services/dtos/services-input-handler/#contributions","title":"Contributions","text":"<p>Contributions to this library are welcome. If you find issues, have suggestions for improvements, or want to add new features, feel free to create an issue or submit a pull request. Your contributions will help improve the library for all users.</p>"},{"location":"reference/libs/python/services/dtos/services-input-handler/code_reference/dto_input_handler/shared/","title":"Shared","text":""},{"location":"reference/libs/python/services/dtos/services-schema-handler/","title":"services-schema-handler","text":"<p>The <code>services-schema-handler</code> library contains Data Transfer Objects (DTOs) for the <code>services-schema-handler</code> service. These DTOs are used to define the structure of data exchanged between different parts of the service, providing a clear and standardized representation of data.</p>"},{"location":"reference/libs/python/services/dtos/services-schema-handler/#usage","title":"Usage","text":"<p>To use the DTOs provided by this library, import the necessary package in your Python code. You can then create instances of these DTOs to work with data in a structured and consistent way.</p>"},{"location":"reference/libs/python/services/dtos/services-schema-handler/#importing-the-library","title":"Importing the Library","text":"<p>Import the library in your python code as follows:</p> <pre><code>from dto_schema_handler.output import SchemaDTO\n</code></pre>"},{"location":"reference/libs/python/services/dtos/services-schema-handler/#using-the-dtos","title":"Using the DTOs","text":"<p>You can use the DTOs in your code to represent and work with data structures related to the <code>services-schema-handler</code> service.</p> <p>Here's an example of how to use the <code>SchemaDTO</code> from the output package:</p> <pre><code>from dto_schema_handler.output import SchemaDTO\n\n# Create an instance of SchemaDTO with sample data\nschema_data = SchemaDTO(\n    id=\"12345\",\n    schema_type=\"data_schema\",\n    service=\"services-schema-handler\",\n    source=\"user\",\n    context=\"example\",\n    json_schema={\n        \"type\": \"object\",\n        \"properties\": {\n            \"name\": {\"type\": \"string\"},\n            \"age\": {\"type\": \"integer\"}\n        }\n    },\n    schema_id=\"67890\"\n)\n\n# Access the properties within the SchemaDTO\nprint(\"ID:\", schema_data.id)\nprint(\"Schema Type:\", schema_data.schema_type)\nprint(\"Service:\", schema_data.service)\nprint(\"Source:\", schema_data.source)\nprint(\"Context:\", schema_data.context)\nprint(\"JSON Schema:\", schema_data.json_schema)\nprint(\"Schema ID:\", schema_data.schema_id)\n</code></pre>"},{"location":"reference/libs/python/services/dtos/services-schema-handler/#dtos-provided","title":"DTOs Provided","text":"<p>The library provides the following DTOs for use in the <code>services-schema-handler</code> service:</p>"},{"location":"reference/libs/python/services/dtos/services-schema-handler/#schemadto-output","title":"<code>SchemaDTO</code> (output)","text":"<p>This DTO represents the main data structure exchanged by the service, including data.</p>"},{"location":"reference/libs/python/services/dtos/services-schema-handler/#contributions","title":"Contributions","text":"<p>Contributions to this library are welcome. If you find issues, have suggestions for improvements, or want to add new features, feel free to create an issue or submit a pull request. Your contributions will help improve the library for all users.</p>"},{"location":"reference/libs/python/services/setup/config-loader/","title":"config-loader","text":""},{"location":"reference/libs/python/services/setup/config-loader/#introduction","title":"Introduction","text":"<p><code>config-loader</code> is a Python library designed to simplify the process of loading configurations for a given service and context environment. This library provides the tools to fetch, register, and organize configurations in a structured manner.</p>"},{"location":"reference/libs/python/services/setup/config-loader/#installation","title":"Installation","text":"<p>You can install <code>config-loader</code> using <code>nx</code>:</p> <pre><code>npx nx add &lt;project&gt; --name python-services-setup-config-loader --local\n</code></pre>"},{"location":"reference/libs/python/services/setup/config-loader/#usage","title":"Usage","text":"<p>To use the library, you need to import the necessary components and follow the provided pattern for fetching and registering configurations.</p>"},{"location":"reference/libs/python/services/setup/config-loader/#initializing-mapping_config","title":"Initializing <code>mapping_config</code>","text":"<p><code>mapping_config</code> is a dictionary that will store configurations organized by context and ID. It needs to be initialized as an empty dictionary.</p> <pre><code>mapping_config: Dict[str, Dict[str, ConfigDTO]] = dict()\n</code></pre>"},{"location":"reference/libs/python/services/setup/config-loader/#fetching-configurations","title":"Fetching Configurations","text":"<p>Use the <code>fetch_configs</code> function to fetch configurations for a given service and context environment.</p> <pre><code>async def fetch_configs(service: str, context_env: str) -&gt; Dict[str, Dict[str, ConfigDTO]]:\n    # Fetch configurations for the specified service and context environment.\n    await ConfigLoader().fetch_configs_for_service(service_name=service, context_env=context_env)\n    return mapping_config\n</code></pre>"},{"location":"reference/libs/python/services/setup/config-loader/#the-configloader-class","title":"The <code>ConfigLoader</code> Class","text":"<p>The <code>ConfigLoader</code> class is responsible for loading configurations from the config handler API client.</p> <pre><code>class ConfigLoader:\n    def __init__(self) -&gt; None:\n        # Initialize the ConfigLoader.\n        # This class is used to load configurations from the config handler API client.\n        self.__config_handler_api_client = async_py_config_handler_client()\n        super().__init()\n\n    async def fetch_configs_for_service(self, service_name: str, context_env: str) -&gt; None:\n        # Fetch configurations for a specific service and context environment.\n        # This method fetches configurations and registers them using the `register_config` function.\n        configs = await self.__config_handler_api_client.list_all_configs_by_service_and_context(service_name, context_env)\n        for config in configs:\n            register_config(\n                config.context,\n                config.id,\n                config\n            )\n</code></pre>"},{"location":"reference/libs/python/services/setup/config-loader/#registering-configurations","title":"Registering Configurations","text":"<p>To register a configuration, use the <code>register_config</code> function. It registers configurations in the <code>mapping_config</code> dictionary.</p> <pre><code>def register_config(context: str, config_id: str, config: ConfigDTO) -&gt; None:\n    # Register a configuration in the mapping_config dictionary.\n    if context not in mapping_config:\n        mapping_config[context] = dict()\n    if config_id in mapping_config[context]:\n        raise Exception(f\"Duplicate config ID '{config_id}' for context '{context}'. Overwriting existing config.\")\n    mapping_config[context][config_id] = config\n</code></pre>"},{"location":"reference/libs/python/services/setup/config-loader/code_reference/config_loader/loader/","title":"Loader","text":""},{"location":"reference/libs/python/services/setup/config-loader/code_reference/config_loader/loader/#libs.python.services.setup.config-loader.config_loader.loader.ConfigLoader","title":"<code>ConfigLoader</code>","text":"Source code in <code>libs/python/services/setup/config-loader/config_loader/loader.py</code> <pre><code>class ConfigLoader:\n    def __init__(self) -&gt; None:\n        \"\"\"\n        Initialize the ConfigLoader.\n\n        Note:\n            This class is used to load configurations from the config handler API client.\n\n        \"\"\"\n        self.__config_handler_api_client = async_py_config_handler_client()\n        super().__init__()\n\n    async def fetch_configs_for_service(self, service_name: str, context_env: str) -&gt; None:\n        \"\"\"\n        Fetch configurations for a specific service and context environment.\n\n        Args:\n            service_name (str): The name of the service for which configurations are to be fetched.\n            context_env (str): The context environment for which configurations are to be fetched.\n\n        Returns:\n            None\n\n        Note:\n            This method fetches configurations and registers them using the `register_config` function.\n\n        \"\"\"\n        configs = await self.__config_handler_api_client.list_all_configs_by_service_and_context(service_name, context_env)\n        for config in configs:\n            register_config(\n                config.context,\n                config.id,\n                config\n            )\n</code></pre>"},{"location":"reference/libs/python/services/setup/config-loader/code_reference/config_loader/loader/#libs.python.services.setup.config-loader.config_loader.loader.ConfigLoader.__init__","title":"<code>__init__()</code>","text":"<p>Initialize the ConfigLoader.</p> Note <p>This class is used to load configurations from the config handler API client.</p> Source code in <code>libs/python/services/setup/config-loader/config_loader/loader.py</code> <pre><code>def __init__(self) -&gt; None:\n    \"\"\"\n    Initialize the ConfigLoader.\n\n    Note:\n        This class is used to load configurations from the config handler API client.\n\n    \"\"\"\n    self.__config_handler_api_client = async_py_config_handler_client()\n    super().__init__()\n</code></pre>"},{"location":"reference/libs/python/services/setup/config-loader/code_reference/config_loader/loader/#libs.python.services.setup.config-loader.config_loader.loader.ConfigLoader.fetch_configs_for_service","title":"<code>fetch_configs_for_service(service_name, context_env)</code>  <code>async</code>","text":"<p>Fetch configurations for a specific service and context environment.</p> <p>Parameters:</p> Name Type Description Default <code>service_name</code> <code>str</code> <p>The name of the service for which configurations are to be fetched.</p> required <code>context_env</code> <code>str</code> <p>The context environment for which configurations are to be fetched.</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Note <p>This method fetches configurations and registers them using the <code>register_config</code> function.</p> Source code in <code>libs/python/services/setup/config-loader/config_loader/loader.py</code> <pre><code>async def fetch_configs_for_service(self, service_name: str, context_env: str) -&gt; None:\n    \"\"\"\n    Fetch configurations for a specific service and context environment.\n\n    Args:\n        service_name (str): The name of the service for which configurations are to be fetched.\n        context_env (str): The context environment for which configurations are to be fetched.\n\n    Returns:\n        None\n\n    Note:\n        This method fetches configurations and registers them using the `register_config` function.\n\n    \"\"\"\n    configs = await self.__config_handler_api_client.list_all_configs_by_service_and_context(service_name, context_env)\n    for config in configs:\n        register_config(\n            config.context,\n            config.id,\n            config\n        )\n</code></pre>"},{"location":"reference/libs/python/services/setup/config-loader/code_reference/config_loader/loader/#libs.python.services.setup.config-loader.config_loader.loader.fetch_configs","title":"<code>fetch_configs(service, context_env)</code>  <code>async</code>","text":"<p>Fetch configurations for a given service and context environment.</p> <p>Parameters:</p> Name Type Description Default <code>service</code> <code>str</code> <p>The name of the service for which configurations are to be fetched.</p> required <code>context_env</code> <code>str</code> <p>The context environment for which configurations are to be fetched.</p> required <p>Returns:</p> Type Description <code>Dict[str, Dict[str, ConfigDTO]]</code> <p>Dict[str, Dict[str, ConfigDTO]]: A dictionary containing configurations organized by context and ID.</p> Note <p>The <code>mapping_config</code> dictionary will be populated by this function.</p> Source code in <code>libs/python/services/setup/config-loader/config_loader/loader.py</code> <pre><code>async def fetch_configs(service: str, context_env: str) -&gt; Dict[str, Dict[str, ConfigDTO]]:\n    \"\"\"\n    Fetch configurations for a given service and context environment.\n\n    Args:\n        service (str): The name of the service for which configurations are to be fetched.\n        context_env (str): The context environment for which configurations are to be fetched.\n\n    Returns:\n        Dict[str, Dict[str, ConfigDTO]]: A dictionary containing configurations organized by context and ID.\n\n    Note:\n        The `mapping_config` dictionary will be populated by this function.\n\n    \"\"\"\n    await ConfigLoader().fetch_configs_for_service(service_name=service, context_env=context_env)\n    return mapping_config\n</code></pre>"},{"location":"reference/libs/python/services/setup/config-loader/code_reference/config_loader/loader/#libs.python.services.setup.config-loader.config_loader.loader.register_config","title":"<code>register_config(context, config_id, config)</code>","text":"<p>Register a configuration in the mapping_config dictionary.</p> <p>Parameters:</p> Name Type Description Default <code>context</code> <code>str</code> <p>The context for which the configuration is being registered.</p> required <code>config_id</code> <code>str</code> <p>The ID of the configuration.</p> required <code>config</code> <code>ConfigDTO</code> <p>The configuration object to be registered.</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> <p>Raises:</p> Type Description <code>Exception</code> <p>If a configuration with the same ID already exists</p> Source code in <code>libs/python/services/setup/config-loader/config_loader/loader.py</code> <pre><code>def register_config(context: str, config_id: str, config: ConfigDTO) -&gt; None:\n    \"\"\"\n    Register a configuration in the mapping_config dictionary.\n\n    Args:\n        context (str): The context for which the configuration is being registered.\n        config_id (str): The ID of the configuration.\n        config (ConfigDTO): The configuration object to be registered.\n\n    Returns:\n        None\n\n    Raises:\n        Exception: If a configuration with the same ID already exists\n    \"\"\"\n    if context not in mapping_config:\n        mapping_config[context] = dict()\n    if config_id in mapping_config[context]:\n        raise Exception(f\"Duplicate config ID '{config_id}' for context '{context}'. Overwriting existing config.\")\n    mapping_config[context][config_id] = config\n</code></pre>"},{"location":"reference/libs/python/shared/py-dotenv/","title":"py-dotenv","text":"<p><code>py-dotenv</code> is a Python library for loading environment variables from .env files. It provides a convenient way to manage and access environment-specific configuration settings in your Python applications.</p>"},{"location":"reference/libs/python/shared/py-dotenv/#installation","title":"Installation","text":"<p>You can install <code>py-dotenv</code> using <code>nx</code>:</p> <pre><code>npx nx add &lt;project&gt; --name python-shared-py-dotenv --local\n</code></pre>"},{"location":"reference/libs/python/shared/py-dotenv/#usage","title":"Usage","text":""},{"location":"reference/libs/python/shared/py-dotenv/#importing-the-library","title":"Importing the Library","text":"<pre><code>from dotenv import load_dotenv\n</code></pre>"},{"location":"reference/libs/python/shared/py-dotenv/#class-dotenvloader","title":"Class: DotEnvLoader","text":"<p>DotEnvLoader is a utility class provided by py-dotenv to manage the loading of environment variables from .env files.</p> <p>Initialization To begin using DotEnvLoader, you can create an instance by specifying the environment and an optional path to the directory containing .env files.</p> <p>Retrieving Environment Variables You can retrieve the value of an environment variable by its key using the get_variable method.</p> <pre><code>loader_vars = DotEnvLoader(environment=\"development\", path=Path(\"/path/to/dotenv\"))\n\nenv_value = loader.get_variable(\"SECRET_KEY\")\n</code></pre>"},{"location":"reference/libs/python/shared/py-dotenv/#configuration","title":"Configuration","text":"<p>The setup_logging function is used to configure the logger. It takes the following parameters:</p> <ul> <li><code>module_name</code> (str): The name of the module or application that is using the logger. <code>propagate</code> (bool): Whether to propagate the logging to the parent logger. <code>log_level</code> (str): The log level to set, which can be one of \"DEBUG\", \"INFO\", \"WARNING\", \"ERROR\", or \"CRITICAL\". The default is \"INFO\".</li> </ul> <p>By default, <code>py-log</code> configures a JSON logger that writes log entries to the console. You can customize the log format and destination by modifying the setup_logging function to suit your specific needs.</p>"},{"location":"reference/libs/python/shared/py-dotenv/#example-json-log-output","title":"Example JSON Log Output","text":"<pre><code>{\"levelname\": \"INFO\", \"filename\": \"example.py\", \"message\": \"This is an info message\"}\n{\"levelname\": \"ERROR\", \"filename\": \"example.py\", \"message\": \"An error occurred\", \"exc_info\": \"Traceback (most recent call last):\\n  File \\\"example.py\\\", line 11, in &lt;module&gt;\\n    result = 10 / 0\\nZeroDivisionError: division by zero\"}\n{\"levelname\": \"WARNING\", \"filename\": \"example.py\", \"message\": \"This is a warning message\"}\n</code></pre>"},{"location":"reference/libs/python/shared/py-dotenv/code_reference/pydotenv/loader/","title":"Loader","text":""},{"location":"reference/libs/python/shared/py-dotenv/code_reference/pydotenv/loader/#libs.python.shared.py-dotenv.pydotenv.loader.DotEnvLoader","title":"<code>DotEnvLoader</code>","text":"<p>A utility class for loading environment variables from .env files.</p> <p>Parameters:</p> Name Type Description Default <code>environment</code> <code>str</code> <p>The environment for which to load environment variables.</p> required <code>path</code> <code>Path</code> <p>The path to the directory containing .env files. If not provided, assumes the current directory.</p> <code>None</code> <p>Attributes:</p> Name Type Description <code>_environment</code> <code>str</code> <p>The environment for which environment variables are loaded.</p> <code>_path</code> <code>Path</code> <p>The path to the directory containing .env files.</p> Example <p>loader = DotEnvLoader(environment=\"development\", path=Path(\"/path/to/dotenv\")) loader.load() value = loader.get_variable(\"SECRET_KEY\")</p> Source code in <code>libs/python/shared/py-dotenv/pydotenv/loader.py</code> <pre><code>class DotEnvLoader:\n    \"\"\"\n    A utility class for loading environment variables from .env files.\n\n    Args:\n        environment (str): The environment for which to load environment variables.\n        path (Path, optional): The path to the directory containing .env files. If not provided, assumes the current directory.\n\n    Attributes:\n        _environment (str): The environment for which environment variables are loaded.\n        _path (Path): The path to the directory containing .env files.\n\n    Methods:\n        __init__(environment, path=None)\n            Initializes a new DotEnvLoader instance.\n\n        load()\n            Loads environment variables from the corresponding .env file into the current environment.\n\n        get_variable(key)\n            Retrieves the value of an environment variable by its key.\n\n    Example:\n        loader = DotEnvLoader(environment=\"development\", path=Path(\"/path/to/dotenv\"))\n        loader.load()\n        value = loader.get_variable(\"SECRET_KEY\")\n    \"\"\"\n\n    def __init__(self, environment: str, path: Path = None) -&gt; None:\n        \"\"\"\n        Initialize a new DotEnvLoader instance.\n\n        Args:\n            environment (str): The environment for which to load environment variables.\n            path (Path, optional): The path to the directory containing .env files. If not provided, assumes the current directory.\n        \"\"\"\n        self._environment = environment\n        self._path = path\n        self.load()\n\n    def _get_env(self) -&gt; Path:\n        \"\"\"\n        Get the path to the .env file corresponding to the specified environment.\n\n        Returns:\n            Path: The path to the .env file.\n        \"\"\"\n        if self._path is not None:\n            return self._path.joinpath(\".env.{env}\".format(env=self._environment))\n        return Path(\".env.{env}\".format(env=self._environment))\n\n    def load(self) -&gt; None:\n        \"\"\"\n        Load environment variables from the .env file into the current environment.\n        \"\"\"\n        path = self._get_env()\n        load_dotenv(path)\n\n    def get_variable(self, key) -&gt; str:\n        \"\"\"\n        Retrieve the value of an environment variable by its key.\n\n        Args:\n            key (str): The key of the environment variable to retrieve.\n\n        Returns:\n            str: The value of the environment variable, or an empty string if not found.\n        \"\"\"\n        return os.getenv(key, \"\")\n</code></pre>"},{"location":"reference/libs/python/shared/py-dotenv/code_reference/pydotenv/loader/#libs.python.shared.py-dotenv.pydotenv.loader.DotEnvLoader.__init__","title":"<code>__init__(environment, path=None)</code>","text":"<p>Initialize a new DotEnvLoader instance.</p> <p>Parameters:</p> Name Type Description Default <code>environment</code> <code>str</code> <p>The environment for which to load environment variables.</p> required <code>path</code> <code>Path</code> <p>The path to the directory containing .env files. If not provided, assumes the current directory.</p> <code>None</code> Source code in <code>libs/python/shared/py-dotenv/pydotenv/loader.py</code> <pre><code>def __init__(self, environment: str, path: Path = None) -&gt; None:\n    \"\"\"\n    Initialize a new DotEnvLoader instance.\n\n    Args:\n        environment (str): The environment for which to load environment variables.\n        path (Path, optional): The path to the directory containing .env files. If not provided, assumes the current directory.\n    \"\"\"\n    self._environment = environment\n    self._path = path\n    self.load()\n</code></pre>"},{"location":"reference/libs/python/shared/py-dotenv/code_reference/pydotenv/loader/#libs.python.shared.py-dotenv.pydotenv.loader.DotEnvLoader.load","title":"<code>load()</code>","text":"<p>Load environment variables from the .env file into the current environment.</p> Source code in <code>libs/python/shared/py-dotenv/pydotenv/loader.py</code> <pre><code>def load(self) -&gt; None:\n    \"\"\"\n    Load environment variables from the .env file into the current environment.\n    \"\"\"\n    path = self._get_env()\n    load_dotenv(path)\n</code></pre>"},{"location":"reference/libs/python/shared/py-dotenv/code_reference/pydotenv/loader/#libs.python.shared.py-dotenv.pydotenv.loader.DotEnvLoader.get_variable","title":"<code>get_variable(key)</code>","text":"<p>Retrieve the value of an environment variable by its key.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>str</code> <p>The key of the environment variable to retrieve.</p> required <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>The value of the environment variable, or an empty string if not found.</p> Source code in <code>libs/python/shared/py-dotenv/pydotenv/loader.py</code> <pre><code>def get_variable(self, key) -&gt; str:\n    \"\"\"\n    Retrieve the value of an environment variable by its key.\n\n    Args:\n        key (str): The key of the environment variable to retrieve.\n\n    Returns:\n        str: The value of the environment variable, or an empty string if not found.\n    \"\"\"\n    return os.getenv(key, \"\")\n</code></pre>"},{"location":"reference/libs/python/shared/py-log/","title":"py-log","text":"<p><code>py-log</code> is a Python library that provides a simple way to set up logging with a JSON format. It is designed to be easy to use and configure, allowing you to quickly integrate structured logging into your Python applications.</p>"},{"location":"reference/libs/python/shared/py-log/#installation","title":"Installation","text":"<p>You can install <code>py-log</code> using <code>nx</code>:</p> <pre><code>npx nx add &lt;project&gt; --name python-shared-py-log --local\n</code></pre>"},{"location":"reference/libs/python/shared/py-log/#usage","title":"Usage","text":""},{"location":"reference/libs/python/shared/py-log/#importing-the-library","title":"Importing the Library","text":"<pre><code>from pylog.log import setup_logging\n\n# Set up logging\nlogger = setup_logging(module_name=\"your_module_name\")\n\n# Log a message\nlogger.info(\"This is an info message\")\n\n# Log an error\ntry:\n    # some code that may raise an exception\n    result = 10 / 0\nexcept ZeroDivisionError as e:\n    logger.error(\"An error occurred\", exc_info=True)\n\n# Change the log level (optional)\nlogger.setLevel(logging.WARNING)\nlogger.warning(\"This is a warning message\")\n\n# For more advanced configuration, you can also set up custom logging handlers and formatters.\n</code></pre>"},{"location":"reference/libs/python/shared/py-log/#configuration","title":"Configuration","text":"<p>The setup_logging function is used to configure the logger. It takes the following parameters:</p> <ul> <li><code>module_name</code> (str): The name of the module or application that is using the logger. <code>propagate</code> (bool): Whether to propagate the logging to the parent logger. <code>log_level</code> (str): The log level to set, which can be one of \"DEBUG\", \"INFO\", \"WARNING\", \"ERROR\", or \"CRITICAL\". The default is \"INFO\".</li> </ul> <p>By default, <code>py-log</code> configures a JSON logger that writes log entries to the console. You can customize the log format and destination by modifying the setup_logging function to suit your specific needs.</p>"},{"location":"reference/libs/python/shared/py-log/#example-json-log-output","title":"Example JSON Log Output","text":"<pre><code>{\"levelname\": \"INFO\", \"filename\": \"example.py\", \"message\": \"This is an info message\"}\n{\"levelname\": \"ERROR\", \"filename\": \"example.py\", \"message\": \"An error occurred\", \"exc_info\": \"Traceback (most recent call last):\\n  File \\\"example.py\\\", line 11, in &lt;module&gt;\\n    result = 10 / 0\\nZeroDivisionError: division by zero\"}\n{\"levelname\": \"WARNING\", \"filename\": \"example.py\", \"message\": \"This is a warning message\"}\n</code></pre>"},{"location":"reference/libs/python/shared/py-log/code_reference/pylog/log/","title":"Log","text":"<p>Logging module.</p>"},{"location":"reference/libs/python/shared/py-log/code_reference/pylog/log/#libs.python.shared.py-log.pylog.log.setup_logging","title":"<code>setup_logging(module_name, propagate=False, log_level=os.getenv('LOG_LEVEL', 'INFO').upper())</code>","text":"<p>Set up logging using JSON format.</p> <p>Parameters:</p> Name Type Description Default <code>module_name</code> <code>str</code> <p>The module name.</p> required <code>propagate</code> <code>bool</code> <p>Whether to propagate the logging to the parent logger.</p> <code>False</code> <code>log_level</code> <code>str</code> <p>The log level.</p> <code>upper()</code> <p>Returns:</p> Type Description <code>Logger</code> <p>The logger.</p> Source code in <code>libs/python/shared/py-log/pylog/log.py</code> <pre><code>def setup_logging(\n    module_name: str,\n    propagate: bool = False,\n    log_level: str = os.getenv(\"LOG_LEVEL\", \"INFO\").upper()\n) -&gt; logging.Logger:\n    \"\"\"\n    Set up logging using JSON format.\n\n    Args:\n        module_name (str): The module name.\n        propagate (bool): Whether to propagate the logging to the parent logger.\n        log_level (str): The log level.\n\n    Returns:\n        The logger.\n    \"\"\"\n    log_handler = logging.StreamHandler()\n    formatter = jsonlogger.JsonFormatter(\"%(levelname)s %(filename)s %(message)s\")\n    log_handler.setFormatter(formatter)\n\n    logger = logging.getLogger(module_name)\n    logger.addHandler(log_handler)\n    logger.propagate = propagate\n    logger.setLevel(logging.getLevelName(log_level))\n    return logger\n</code></pre>"},{"location":"reference/libs/python/shared/py-request/","title":"py-request","text":"<p><code>py-request</code> is a Python library that provides an asynchronous HTTP client with rate limiting. It allows you to make HTTP requests while ensuring that you do not exceed a maximum number of requests within a specified time period.</p>"},{"location":"reference/libs/python/shared/py-request/#installation","title":"Installation","text":"<p>You can install <code>py-dotenv</code> using <code>nx</code>:</p> <pre><code>npx nx add &lt;project&gt; --name python-shared-py-request --local\n</code></pre>"},{"location":"reference/libs/python/shared/py-request/#usage","title":"Usage","text":"<p>To use <code>py-request</code>, you first need to import the <code>RateLimitedAsyncHttpClient</code> class from the library. Here's an example of how to use it:</p> <pre><code>from pyrequest.factory import RateLimitedAsyncHttpClient\n\n# Initialize the client with your base URL, maximum calls, and period\nbase_url = \"http://example.com\"\nmax_calls = 2\nperiod = 1\nclient = RateLimitedAsyncHttpClient(base_url, max_calls, period)\n\n# Make an asynchronous HTTP request\nresponse = await client.make_request(\"GET\", \"/api/endpoint\")\n\n# The response is a dictionary representing the JSON response from the HTTP request\nprint(response)\n</code></pre>"},{"location":"reference/libs/python/shared/py-request/code_reference/pyrequest/factory/","title":"Factory","text":""},{"location":"reference/libs/python/shared/py-request/code_reference/pyrequest/factory/#libs.python.shared.py-request.pyrequest.factory.RateLimitedAsyncHttpClient","title":"<code>RateLimitedAsyncHttpClient</code>","text":"<p>An asynchronous HTTP client with rate limiting.</p> <p>This class allows you to make HTTP requests with rate limiting to prevent exceeding a maximum number of requests within a specified time period.</p> <p>Parameters:</p> Name Type Description Default <code>base_url</code> <code>str</code> <p>The base URL for the HTTP requests.</p> required <code>max_calls</code> <code>int</code> <p>The maximum number of allowed calls within the specified period.</p> required <code>period</code> <code>int</code> <p>The time period (in seconds) during which the maximum calls are allowed.</p> required <p>Attributes:</p> Name Type Description <code>base_url</code> <code>str</code> <p>The base URL for the HTTP requests.</p> <code>max_calls</code> <code>int</code> <p>The maximum number of allowed calls within the specified period.</p> <code>period</code> <code>int</code> <p>The time period (in seconds) during which the maximum calls are allowed.</p> <code>semaphore</code> <code>Semaphore</code> <p>An asyncio semaphore used for rate limiting.</p> Source code in <code>libs/python/shared/py-request/pyrequest/factory.py</code> <pre><code>class RateLimitedAsyncHttpClient:\n    \"\"\"\n    An asynchronous HTTP client with rate limiting.\n\n    This class allows you to make HTTP requests with rate limiting to prevent\n    exceeding a maximum number of requests within a specified time period.\n\n    Args:\n        base_url (str): The base URL for the HTTP requests.\n        max_calls (int): The maximum number of allowed calls within the specified period.\n        period (int): The time period (in seconds) during which the maximum calls are allowed.\n\n    Attributes:\n        base_url (str): The base URL for the HTTP requests.\n        max_calls (int): The maximum number of allowed calls within the specified period.\n        period (int): The time period (in seconds) during which the maximum calls are allowed.\n        semaphore (asyncio.Semaphore): An asyncio semaphore used for rate limiting.\n\n    \"\"\"\n    def __init__(self, base_url: str, max_calls: int, period: int) -&gt; None:\n        \"\"\"\n        Initialize the RateLimitedAsyncHttpClient with the specified parameters.\n\n        Args:\n            base_url (str): The base URL for the HTTP requests.\n            max_calls (int): The maximum number of allowed calls within the specified period.\n            period (int): The time period (in seconds) during which the maximum calls are allowed.\n        \"\"\"\n        self.base_url = base_url\n        self.max_calls = max_calls\n        self.period = period\n        self.semaphore = asyncio.Semaphore(max_calls)\n\n    async def make_request(self, method: str, endpoint: str, data: Dict[str, any] = None, params: Dict[str, any] = None) -&gt; Dict[str, any]:\n        \"\"\"\n        Make an asynchronous HTTP request with rate limiting.\n\n        This method sends an HTTP request using the specified method, endpoint, data, and parameters.\n        Rate limiting is enforced to prevent exceeding the maximum number of calls within the specified period.\n\n        Args:\n            method (str): The HTTP request method (e.g., 'GET', 'POST').\n            endpoint (str): The endpoint to request, relative to the base URL.\n            data (dict, optional): A dictionary of data to send in the request body (as JSON).\n            params (dict, optional): A dictionary of query parameters to include in the request.\n\n        Returns:\n            dict: A dictionary representing the JSON response from the HTTP request.\n\n        Raises:\n            httpx.HTTPStatusError: If the HTTP request results in an error response.\n\n        \"\"\"\n        url = self.base_url + endpoint\n        async with self.semaphore:\n            async with httpx.AsyncClient() as client:\n                response = await client.request(method, url, json=data, params=params)\n                response.raise_for_status()\n                return response.json()\n</code></pre>"},{"location":"reference/libs/python/shared/py-request/code_reference/pyrequest/factory/#libs.python.shared.py-request.pyrequest.factory.RateLimitedAsyncHttpClient.__init__","title":"<code>__init__(base_url, max_calls, period)</code>","text":"<p>Initialize the RateLimitedAsyncHttpClient with the specified parameters.</p> <p>Parameters:</p> Name Type Description Default <code>base_url</code> <code>str</code> <p>The base URL for the HTTP requests.</p> required <code>max_calls</code> <code>int</code> <p>The maximum number of allowed calls within the specified period.</p> required <code>period</code> <code>int</code> <p>The time period (in seconds) during which the maximum calls are allowed.</p> required Source code in <code>libs/python/shared/py-request/pyrequest/factory.py</code> <pre><code>def __init__(self, base_url: str, max_calls: int, period: int) -&gt; None:\n    \"\"\"\n    Initialize the RateLimitedAsyncHttpClient with the specified parameters.\n\n    Args:\n        base_url (str): The base URL for the HTTP requests.\n        max_calls (int): The maximum number of allowed calls within the specified period.\n        period (int): The time period (in seconds) during which the maximum calls are allowed.\n    \"\"\"\n    self.base_url = base_url\n    self.max_calls = max_calls\n    self.period = period\n    self.semaphore = asyncio.Semaphore(max_calls)\n</code></pre>"},{"location":"reference/libs/python/shared/py-request/code_reference/pyrequest/factory/#libs.python.shared.py-request.pyrequest.factory.RateLimitedAsyncHttpClient.make_request","title":"<code>make_request(method, endpoint, data=None, params=None)</code>  <code>async</code>","text":"<p>Make an asynchronous HTTP request with rate limiting.</p> <p>This method sends an HTTP request using the specified method, endpoint, data, and parameters. Rate limiting is enforced to prevent exceeding the maximum number of calls within the specified period.</p> <p>Parameters:</p> Name Type Description Default <code>method</code> <code>str</code> <p>The HTTP request method (e.g., 'GET', 'POST').</p> required <code>endpoint</code> <code>str</code> <p>The endpoint to request, relative to the base URL.</p> required <code>data</code> <code>dict</code> <p>A dictionary of data to send in the request body (as JSON).</p> <code>None</code> <code>params</code> <code>dict</code> <p>A dictionary of query parameters to include in the request.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>dict</code> <code>Dict[str, any]</code> <p>A dictionary representing the JSON response from the HTTP request.</p> <p>Raises:</p> Type Description <code>HTTPStatusError</code> <p>If the HTTP request results in an error response.</p> Source code in <code>libs/python/shared/py-request/pyrequest/factory.py</code> <pre><code>async def make_request(self, method: str, endpoint: str, data: Dict[str, any] = None, params: Dict[str, any] = None) -&gt; Dict[str, any]:\n    \"\"\"\n    Make an asynchronous HTTP request with rate limiting.\n\n    This method sends an HTTP request using the specified method, endpoint, data, and parameters.\n    Rate limiting is enforced to prevent exceeding the maximum number of calls within the specified period.\n\n    Args:\n        method (str): The HTTP request method (e.g., 'GET', 'POST').\n        endpoint (str): The endpoint to request, relative to the base URL.\n        data (dict, optional): A dictionary of data to send in the request body (as JSON).\n        params (dict, optional): A dictionary of query parameters to include in the request.\n\n    Returns:\n        dict: A dictionary representing the JSON response from the HTTP request.\n\n    Raises:\n        httpx.HTTPStatusError: If the HTTP request results in an error response.\n\n    \"\"\"\n    url = self.base_url + endpoint\n    async with self.semaphore:\n        async with httpx.AsyncClient() as client:\n            response = await client.request(method, url, json=data, params=params)\n            response.raise_for_status()\n            return response.json()\n</code></pre>"},{"location":"reference/libs/python/shared/py-sd/","title":"py-sd","text":"<p><code>py-sd</code> is a Python library for service discovery and environment variable management. It provides a convenient way to access service endpoints and environment variables needed for a distributed system.</p>"},{"location":"reference/libs/python/shared/py-sd/#installation","title":"Installation","text":"<p>You can install <code>py-sd</code> using <code>nx</code>:</p> <pre><code>npx nx add &lt;project&gt; --name python-shared-py-sd --local\n</code></pre>"},{"location":"reference/libs/python/shared/py-sd/#usage","title":"Usage","text":""},{"location":"reference/libs/python/shared/py-sd/#importing-the-library","title":"Importing the Library","text":"<pre><code>from pysd.service_discovery import new_from_env\n\nsd = new_from_env()\n\n# Get the RabbitMQ endpoint\nrabbitmq_endpoint = sd.rabbitmq_endpoint()\n</code></pre>"},{"location":"reference/libs/python/shared/py-sd/#handling-exceptions","title":"Handling Exceptions","text":"<p><code>py-sd</code> provides two custom exceptions:</p> <ul> <li><code>UnrecoverableError</code>: Raised when environment variables are not set.</li> <li><code>ServiceUnavailableError</code>: Raised when a required environment variable is not set. You can handle these exceptions in your code to provide appropriate error handling.</li> </ul>"},{"location":"reference/libs/python/shared/py-sd/#examples","title":"Examples","text":"<p>Here are some examples of how to use the py-sd library:</p> <pre><code>import os\nfrom pysd import ServiceDiscovery, UnrecoverableError, ServiceUnavailableError\n\n# Create a ServiceDiscovery instance using environment variables\nservice_discovery = ServiceDiscovery(os.environ)\n\ntry:\n    # Get the RabbitMQ endpoint\n    rabbitmq_endpoint = service_discovery.rabbitmq_endpoint()\n    print(f\"RabbitMQ endpoint: {rabbitmq_endpoint}\")\n\n    # Get the Minio access key\n    minio_access_key = service_discovery.minio_access_key()\n    print(f\"Minio access key: {minio_access_key}\")\n\nexcept UnrecoverableError as e:\n    print(f\"Unrecoverable error: {str(e)}\")\n\nexcept ServiceUnavailableError as e:\n    print(f\"Service unavailable: {str(e)}\")\n</code></pre>"},{"location":"reference/libs/python/shared/py-sd/code_reference/pysd/service_discovery/","title":"Service discovery","text":""},{"location":"reference/libs/python/shared/py-sd/code_reference/pysd/service_discovery/#libs.python.shared.py-sd.pysd.service_discovery.UnrecoverableError","title":"<code>UnrecoverableError</code>","text":"<p>             Bases: <code>Exception</code></p> Source code in <code>libs/python/shared/py-sd/pysd/service_discovery.py</code> <pre><code>class UnrecoverableError(Exception):\n    def __init__(self, *args: object) -&gt; None:\n        \"\"\"\n        Initializes an UnrecoverableError.\n\n        Args:\n            args (object): Any additional arguments for the exception.\n        \"\"\"\n        super().__init__(*args)\n</code></pre>"},{"location":"reference/libs/python/shared/py-sd/code_reference/pysd/service_discovery/#libs.python.shared.py-sd.pysd.service_discovery.UnrecoverableError.__init__","title":"<code>__init__(*args)</code>","text":"<p>Initializes an UnrecoverableError.</p> <p>Parameters:</p> Name Type Description Default <code>args</code> <code>object</code> <p>Any additional arguments for the exception.</p> <code>()</code> Source code in <code>libs/python/shared/py-sd/pysd/service_discovery.py</code> <pre><code>def __init__(self, *args: object) -&gt; None:\n    \"\"\"\n    Initializes an UnrecoverableError.\n\n    Args:\n        args (object): Any additional arguments for the exception.\n    \"\"\"\n    super().__init__(*args)\n</code></pre>"},{"location":"reference/libs/python/shared/py-sd/code_reference/pysd/service_discovery/#libs.python.shared.py-sd.pysd.service_discovery.ServiceUnavailableError","title":"<code>ServiceUnavailableError</code>","text":"<p>             Bases: <code>Exception</code></p> Source code in <code>libs/python/shared/py-sd/pysd/service_discovery.py</code> <pre><code>class ServiceUnavailableError(Exception):\n    def __init__(self, *args: object) -&gt; None:\n        \"\"\"\n        Initializes a ServiceUnavailableError.\n\n        Args:\n            args (object): Any additional arguments for the exception.\n        \"\"\"\n        super().__init__(*args)\n</code></pre>"},{"location":"reference/libs/python/shared/py-sd/code_reference/pysd/service_discovery/#libs.python.shared.py-sd.pysd.service_discovery.ServiceUnavailableError.__init__","title":"<code>__init__(*args)</code>","text":"<p>Initializes a ServiceUnavailableError.</p> <p>Parameters:</p> Name Type Description Default <code>args</code> <code>object</code> <p>Any additional arguments for the exception.</p> <code>()</code> Source code in <code>libs/python/shared/py-sd/pysd/service_discovery.py</code> <pre><code>def __init__(self, *args: object) -&gt; None:\n    \"\"\"\n    Initializes a ServiceUnavailableError.\n\n    Args:\n        args (object): Any additional arguments for the exception.\n    \"\"\"\n    super().__init__(*args)\n</code></pre>"},{"location":"reference/libs/python/shared/py-sd/code_reference/pysd/service_discovery/#libs.python.shared.py-sd.pysd.service_discovery.ServiceDiscovery","title":"<code>ServiceDiscovery</code>","text":"Source code in <code>libs/python/shared/py-sd/pysd/service_discovery.py</code> <pre><code>class ServiceDiscovery:\n    def __init__(self, envvars):\n        \"\"\"\n        Initializes a ServiceDiscovery instance.\n\n        Args:\n            envvars (dict): A dictionary of environment variables.\n\n        Raises:\n            UnrecoverableError: If environment variables are not set.\n        \"\"\"\n        if envvars is None:\n            raise UnrecoverableError('Environment variables not set')\n        self._vars = envvars\n        self._service_vars = ServiceVars()\n\n    def _get_endpoint(self, var_name: str, service_name: str, protocol: str = \"http\") -&gt; str:\n        \"\"\"\n        Gets the endpoint for a service.\n\n        Args:\n            var_name (str): The name of the environment variable containing the service endpoint.\n            service_name (str): The name of the service.\n            protocol (str): The protocol to use (default is \"http\").\n\n        Returns:\n            str: The service endpoint.\n\n        Raises:\n            ServiceUnavailableError: If the environment variable is not set.\n        \"\"\"\n        if var_name not in self._vars:\n            raise ServiceUnavailableError(f'Environment variable {var_name} not set')\n        tcp_addr = self._vars[var_name]\n        gt_host = self._get_gateway_host(service_name)\n        return tcp_addr.replace(\"tcp\", protocol).replace(\"gateway_host\", gt_host)\n\n    def _get_gateway_host(self, service_name: str) -&gt; str:\n        \"\"\"\n        Gets the gateway host for a service.\n\n        Args:\n            service_name (str): The name of the service.\n\n        Returns:\n            str: The gateway host.\n\n        Notes:\n            If the 'GATEWAY_ENVIRONMENT' environment variable is not set, 'localhost' is returned.\n        \"\"\"\n        if os.getenv('GATEWAY_ENVIRONMENT') is None:\n            return 'localhost'\n        return os.getenv(f'{service_name}_GATEWAY_HOST')\n\n    def rabbitmq_endpoint(self) -&gt; str:\n        \"\"\"\n        Gets the RabbitMQ endpoint.\n\n        Returns:\n            str: The RabbitMQ endpoint in 'amqp' protocol.\n        \"\"\"\n        service_name = self._service_vars.rabbitmq\n        return self._get_endpoint(\"RABBITMQ_PORT_6572_TCP\", service_name, protocol=\"amqp\")\n\n    def services_rabbitmq_exchange(self) -&gt; str:\n        \"\"\"\n        Gets the services RabbitMQ exchange.\n\n        Returns:\n            str: The name of the services RabbitMQ exchange.\n        \"\"\"\n        return self._service_vars.services_rabbitmq_exchange\n\n    def services_config_handler_endpoint(self):\n        \"\"\"\n        Gets the services config handler endpoint.\n\n        Returns:\n            str: The services config handler endpoint.\n        \"\"\"\n        service_name = self._service_vars.configHandler\n        endpoint = self._get_endpoint(\"SERVICES_CONFIG_HANDLER_PORT_8000_TCP\", service_name)\n        if \"localhost\" in endpoint:\n            endpoint = endpoint.replace(\"8000\", \"8002\")\n        return endpoint\n\n    def services_schemas_handler_endpoint(self):\n        \"\"\"\n        Gets the services schemas handler endpoint.\n\n        Returns:\n            str: The services schemas handler endpoint.\n        \"\"\"\n        service_name = self._service_vars.schemasHandler\n        endpoint = self._get_endpoint(\"SERVICES_SCHEMAS_HANDLER_PORT_8000_TCP\", service_name)\n        if \"localhost\" in endpoint:\n            endpoint = endpoint.replace(\"8000\", \"8003\")\n        return endpoint\n\n    def services_file_catalog_handler_endpoint(self):\n        \"\"\"\n        Gets the services file catalog handler endpoint.\n\n        Returns:\n            str: The services file catalog handler endpoint.\n        \"\"\"\n        service_name = self._service_vars.fileCatalogHandler\n        endpoint = self._get_endpoint(\"SERVICES_FILE_CATALOG_HANDLER\", service_name)\n        if \"localhost\" in endpoint:\n            endpoint = endpoint.replace(\"8000\", \"8004\")\n        return endpoint\n\n    def minio_endpoint(self):\n        \"\"\"\n        Gets the Minio endpoint.\n\n        Returns:\n            str: The Minio endpoint.\n        \"\"\"\n        service_name = self._service_vars.minio\n        endpoint = self._get_endpoint(\"MINIO_PORT_9000_TCP\", service_name)\n        return endpoint\n\n    def minio_access_key(self):\n        \"\"\"\n        Gets the Minio access key.\n\n        Returns:\n            str: The Minio access key.\n        \"\"\"\n        return os.getenv(\"MINIO_ACCESS_KEY\")\n\n    def minio_secret_key(self):\n        \"\"\"\n        Gets the Minio secret key.\n\n        Returns:\n            str: The Minio secret key.\n        \"\"\"\n        return os.getenv(\"MINIO_SECRET_KEY\")\n</code></pre>"},{"location":"reference/libs/python/shared/py-sd/code_reference/pysd/service_discovery/#libs.python.shared.py-sd.pysd.service_discovery.ServiceDiscovery.__init__","title":"<code>__init__(envvars)</code>","text":"<p>Initializes a ServiceDiscovery instance.</p> <p>Parameters:</p> Name Type Description Default <code>envvars</code> <code>dict</code> <p>A dictionary of environment variables.</p> required <p>Raises:</p> Type Description <code>UnrecoverableError</code> <p>If environment variables are not set.</p> Source code in <code>libs/python/shared/py-sd/pysd/service_discovery.py</code> <pre><code>def __init__(self, envvars):\n    \"\"\"\n    Initializes a ServiceDiscovery instance.\n\n    Args:\n        envvars (dict): A dictionary of environment variables.\n\n    Raises:\n        UnrecoverableError: If environment variables are not set.\n    \"\"\"\n    if envvars is None:\n        raise UnrecoverableError('Environment variables not set')\n    self._vars = envvars\n    self._service_vars = ServiceVars()\n</code></pre>"},{"location":"reference/libs/python/shared/py-sd/code_reference/pysd/service_discovery/#libs.python.shared.py-sd.pysd.service_discovery.ServiceDiscovery.rabbitmq_endpoint","title":"<code>rabbitmq_endpoint()</code>","text":"<p>Gets the RabbitMQ endpoint.</p> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>The RabbitMQ endpoint in 'amqp' protocol.</p> Source code in <code>libs/python/shared/py-sd/pysd/service_discovery.py</code> <pre><code>def rabbitmq_endpoint(self) -&gt; str:\n    \"\"\"\n    Gets the RabbitMQ endpoint.\n\n    Returns:\n        str: The RabbitMQ endpoint in 'amqp' protocol.\n    \"\"\"\n    service_name = self._service_vars.rabbitmq\n    return self._get_endpoint(\"RABBITMQ_PORT_6572_TCP\", service_name, protocol=\"amqp\")\n</code></pre>"},{"location":"reference/libs/python/shared/py-sd/code_reference/pysd/service_discovery/#libs.python.shared.py-sd.pysd.service_discovery.ServiceDiscovery.services_rabbitmq_exchange","title":"<code>services_rabbitmq_exchange()</code>","text":"<p>Gets the services RabbitMQ exchange.</p> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>The name of the services RabbitMQ exchange.</p> Source code in <code>libs/python/shared/py-sd/pysd/service_discovery.py</code> <pre><code>def services_rabbitmq_exchange(self) -&gt; str:\n    \"\"\"\n    Gets the services RabbitMQ exchange.\n\n    Returns:\n        str: The name of the services RabbitMQ exchange.\n    \"\"\"\n    return self._service_vars.services_rabbitmq_exchange\n</code></pre>"},{"location":"reference/libs/python/shared/py-sd/code_reference/pysd/service_discovery/#libs.python.shared.py-sd.pysd.service_discovery.ServiceDiscovery.services_config_handler_endpoint","title":"<code>services_config_handler_endpoint()</code>","text":"<p>Gets the services config handler endpoint.</p> <p>Returns:</p> Name Type Description <code>str</code> <p>The services config handler endpoint.</p> Source code in <code>libs/python/shared/py-sd/pysd/service_discovery.py</code> <pre><code>def services_config_handler_endpoint(self):\n    \"\"\"\n    Gets the services config handler endpoint.\n\n    Returns:\n        str: The services config handler endpoint.\n    \"\"\"\n    service_name = self._service_vars.configHandler\n    endpoint = self._get_endpoint(\"SERVICES_CONFIG_HANDLER_PORT_8000_TCP\", service_name)\n    if \"localhost\" in endpoint:\n        endpoint = endpoint.replace(\"8000\", \"8002\")\n    return endpoint\n</code></pre>"},{"location":"reference/libs/python/shared/py-sd/code_reference/pysd/service_discovery/#libs.python.shared.py-sd.pysd.service_discovery.ServiceDiscovery.services_schemas_handler_endpoint","title":"<code>services_schemas_handler_endpoint()</code>","text":"<p>Gets the services schemas handler endpoint.</p> <p>Returns:</p> Name Type Description <code>str</code> <p>The services schemas handler endpoint.</p> Source code in <code>libs/python/shared/py-sd/pysd/service_discovery.py</code> <pre><code>def services_schemas_handler_endpoint(self):\n    \"\"\"\n    Gets the services schemas handler endpoint.\n\n    Returns:\n        str: The services schemas handler endpoint.\n    \"\"\"\n    service_name = self._service_vars.schemasHandler\n    endpoint = self._get_endpoint(\"SERVICES_SCHEMAS_HANDLER_PORT_8000_TCP\", service_name)\n    if \"localhost\" in endpoint:\n        endpoint = endpoint.replace(\"8000\", \"8003\")\n    return endpoint\n</code></pre>"},{"location":"reference/libs/python/shared/py-sd/code_reference/pysd/service_discovery/#libs.python.shared.py-sd.pysd.service_discovery.ServiceDiscovery.services_file_catalog_handler_endpoint","title":"<code>services_file_catalog_handler_endpoint()</code>","text":"<p>Gets the services file catalog handler endpoint.</p> <p>Returns:</p> Name Type Description <code>str</code> <p>The services file catalog handler endpoint.</p> Source code in <code>libs/python/shared/py-sd/pysd/service_discovery.py</code> <pre><code>def services_file_catalog_handler_endpoint(self):\n    \"\"\"\n    Gets the services file catalog handler endpoint.\n\n    Returns:\n        str: The services file catalog handler endpoint.\n    \"\"\"\n    service_name = self._service_vars.fileCatalogHandler\n    endpoint = self._get_endpoint(\"SERVICES_FILE_CATALOG_HANDLER\", service_name)\n    if \"localhost\" in endpoint:\n        endpoint = endpoint.replace(\"8000\", \"8004\")\n    return endpoint\n</code></pre>"},{"location":"reference/libs/python/shared/py-sd/code_reference/pysd/service_discovery/#libs.python.shared.py-sd.pysd.service_discovery.ServiceDiscovery.minio_endpoint","title":"<code>minio_endpoint()</code>","text":"<p>Gets the Minio endpoint.</p> <p>Returns:</p> Name Type Description <code>str</code> <p>The Minio endpoint.</p> Source code in <code>libs/python/shared/py-sd/pysd/service_discovery.py</code> <pre><code>def minio_endpoint(self):\n    \"\"\"\n    Gets the Minio endpoint.\n\n    Returns:\n        str: The Minio endpoint.\n    \"\"\"\n    service_name = self._service_vars.minio\n    endpoint = self._get_endpoint(\"MINIO_PORT_9000_TCP\", service_name)\n    return endpoint\n</code></pre>"},{"location":"reference/libs/python/shared/py-sd/code_reference/pysd/service_discovery/#libs.python.shared.py-sd.pysd.service_discovery.ServiceDiscovery.minio_access_key","title":"<code>minio_access_key()</code>","text":"<p>Gets the Minio access key.</p> <p>Returns:</p> Name Type Description <code>str</code> <p>The Minio access key.</p> Source code in <code>libs/python/shared/py-sd/pysd/service_discovery.py</code> <pre><code>def minio_access_key(self):\n    \"\"\"\n    Gets the Minio access key.\n\n    Returns:\n        str: The Minio access key.\n    \"\"\"\n    return os.getenv(\"MINIO_ACCESS_KEY\")\n</code></pre>"},{"location":"reference/libs/python/shared/py-sd/code_reference/pysd/service_discovery/#libs.python.shared.py-sd.pysd.service_discovery.ServiceDiscovery.minio_secret_key","title":"<code>minio_secret_key()</code>","text":"<p>Gets the Minio secret key.</p> <p>Returns:</p> Name Type Description <code>str</code> <p>The Minio secret key.</p> Source code in <code>libs/python/shared/py-sd/pysd/service_discovery.py</code> <pre><code>def minio_secret_key(self):\n    \"\"\"\n    Gets the Minio secret key.\n\n    Returns:\n        str: The Minio secret key.\n    \"\"\"\n    return os.getenv(\"MINIO_SECRET_KEY\")\n</code></pre>"},{"location":"reference/libs/python/shared/py-sd/code_reference/pysd/service_discovery/#libs.python.shared.py-sd.pysd.service_discovery.new_from_env","title":"<code>new_from_env()</code>","text":"<p>Creates a ServiceDiscovery instance using environment variables.</p> <p>Returns:</p> Name Type Description <code>ServiceDiscovery</code> <p>A new ServiceDiscovery instance.</p> Source code in <code>libs/python/shared/py-sd/pysd/service_discovery.py</code> <pre><code>def new_from_env():\n    \"\"\"\n    Creates a ServiceDiscovery instance using environment variables.\n\n    Returns:\n        ServiceDiscovery: A new ServiceDiscovery instance.\n    \"\"\"\n    return ServiceDiscovery(os.environ)\n</code></pre>"},{"location":"reference/libs/python/shared/py-serializer/","title":"py-serializer","text":"<p><code>py-serializer</code> is a Python library that provides functionality to serialize and deserialize dataclass objects to and from JSON and dictionaries. It simplifies the process of converting dataclass objects into a format that can be easily stored or transmitted, such as JSON.</p>"},{"location":"reference/libs/python/shared/py-serializer/#installation","title":"Installation","text":"<p>You can install <code>py-serializer</code> using <code>nx</code>:</p> <pre><code>npx nx add &lt;project&gt; --name python-shared-py-serializer --local\n</code></pre>"},{"location":"reference/libs/python/shared/py-serializer/#usage","title":"Usage","text":""},{"location":"reference/libs/python/shared/py-serializer/#importing-the-library","title":"Importing the Library","text":"<pre><code>from pyserializer.serializer import serialize_to_json, serialize_to_dict, serialize_to_dataclass\n</code></pre>"},{"location":"reference/libs/python/shared/py-serializer/#serializing-a-dataclass-object-to-json","title":"Serializing a Dataclass Object to JSON","text":"<pre><code># Serialize a dataclass object to a JSON string\ndataclass_obj = YourDataclass(...)\njson_string = serialize_to_json(dataclass_obj)\n</code></pre>"},{"location":"reference/libs/python/shared/py-serializer/#serializing-a-dataclass-object-to-a-dictionary","title":"Serializing a Dataclass Object to a Dictionary","text":"<pre><code># Serialize a dataclass object to a dictionary\ndataclass_obj = YourDataclass(...)\ndata_dict = serialize_to_dict(dataclass_obj)\n</code></pre>"},{"location":"reference/libs/python/shared/py-serializer/#deserializing-data-to-a-dataclass-object","title":"Deserializing Data to a Dataclass Object","text":"<pre><code># Deserialize data from a dictionary to a dataclass object\ndata = {...}  # Your data in dictionary form\ndataclass_obj = serialize_to_dataclass(data, YourDataclass)\n</code></pre>"},{"location":"reference/libs/python/shared/py-serializer/#examples","title":"Examples","text":"<p>Here are some examples of how to use the library:</p> <pre><code>from dataclasses import dataclass\nfrom pyserializer.serializer import serialize_to_json, serialize_to_dict, serialize_to_dataclass\n\n# Define a sample dataclass\n@dataclass\nclass Person:\n    name: str\n    age: int\n\n# Create a Person object\nperson = Person(name=\"Alice\", age=30)\n\n# Serialize the object to JSON\njson_data = serialize_to_json(person)\nprint(json_data)  # Output: {\"name\": \"Alice\", \"age\": 30}\n\n# Serialize the object to a dictionary\ndict_data = serialize_to_dict(person)\nprint(dict_data)  # Output: {\"name\": \"Alice\", \"age\": 30}\n\n# Deserialize data to a dataclass object\ndata = {\"name\": \"Bob\", \"age\": 25}\nnew_person = serialize_to_dataclass(data, Person)\nprint(new_person)  # Output: Person(name='Bob', age=25)\n</code></pre>"},{"location":"reference/libs/python/shared/py-serializer/#developing","title":"Developing","text":""},{"location":"reference/libs/python/shared/py-serializer/#run-tests","title":"Run tests","text":"<pre><code>npx nx test python-shared-py-serializer\n</code></pre>"},{"location":"reference/libs/python/shared/py-serializer/code_reference/pyserializer/serializer/","title":"Serializer","text":""},{"location":"reference/libs/python/shared/py-serializer/code_reference/pyserializer/serializer/#libs.python.shared.py-serializer.pyserializer.serializer.serialize_to_json","title":"<code>serialize_to_json(obj)</code>","text":"<p>Serializes a dataclass object to a JSON string.</p> <p>Parameters:</p> Name Type Description Default <code>obj</code> <code>dataclass</code> <p>A dataclass object to be serialized.</p> required <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>A JSON string representing the serialized data from the dataclass object.</p> Source code in <code>libs/python/shared/py-serializer/pyserializer/serializer.py</code> <pre><code>def serialize_to_json(obj: dataclass) -&gt; str:\n    \"\"\"\n    Serializes a dataclass object to a JSON string.\n\n    Args:\n        obj: A dataclass object to be serialized.\n\n    Returns:\n        str: A JSON string representing the serialized data from the dataclass object.\n    \"\"\"\n    data = _get_serialized_object(obj)\n    return json.dumps(data, sort_keys=True)\n</code></pre>"},{"location":"reference/libs/python/shared/py-serializer/code_reference/pyserializer/serializer/#libs.python.shared.py-serializer.pyserializer.serializer.serialize_to_dict","title":"<code>serialize_to_dict(obj)</code>","text":"<p>Serializes a dataclass object to a dictionary.</p> <p>Parameters:</p> Name Type Description Default <code>obj</code> <code>dataclass</code> <p>A dataclass object to be serialized.</p> required <p>Returns:</p> Name Type Description <code>dict</code> <code>Dict[str, any]</code> <p>A dictionary containing the serialized data from the dataclass object.</p> Source code in <code>libs/python/shared/py-serializer/pyserializer/serializer.py</code> <pre><code>def serialize_to_dict(obj: dataclass) -&gt; Dict[str, any]:\n    \"\"\"\n    Serializes a dataclass object to a dictionary.\n\n    Args:\n        obj: A dataclass object to be serialized.\n\n    Returns:\n        dict: A dictionary containing the serialized data from the dataclass object.\n    \"\"\"\n    return _get_serialized_object(obj)\n</code></pre>"},{"location":"reference/libs/python/shared/py-serializer/code_reference/pyserializer/serializer/#libs.python.shared.py-serializer.pyserializer.serializer.serialize_to_dataclass","title":"<code>serialize_to_dataclass(data, cls)</code>","text":"<p>Deserializes data from a dictionary into a dataclass object.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>Dict[str, any]</code> <p>A dictionary containing data to be deserialized.</p> required <code>cls</code> <code>Type</code> <p>The dataclass type to which the data should be deserialized.</p> required <p>Returns:</p> Name Type Description <code>cls</code> <code>dataclass</code> <p>An instance of the specified dataclass type with data deserialized from the input dictionary.</p> Source code in <code>libs/python/shared/py-serializer/pyserializer/serializer.py</code> <pre><code>def serialize_to_dataclass(data: Dict[str, any], cls: Type) -&gt; dataclass:\n    \"\"\"\n    Deserializes data from a dictionary into a dataclass object.\n\n    Args:\n        data: A dictionary containing data to be deserialized.\n        cls: The dataclass type to which the data should be deserialized.\n\n    Returns:\n        cls: An instance of the specified dataclass type with data deserialized from the input dictionary.\n    \"\"\"\n    args = {}\n    for field_obj in fields(cls):\n        field_name = field_obj.name\n        field_metadata = field_obj.metadata\n        json_name = field_metadata.get(\"json_name\", field_name)\n\n        if json_name in data:\n            args[field_name] = data[json_name]\n\n    return cls(**args)\n</code></pre>"},{"location":"reference/node_modules/%40nrwl/nx-cloud/","title":"Nx Cloud","text":"<p>This work is licensed under a Creative Commons Attribution-NoDerivs 3.0 Unported License.  </p> <p>Distributed caching and analytics for your Nx Workspace.</p> <ul> <li>Learn more about Nx at nx.dev.</li> <li>Learn more about Nx Cloud at nx.app.</li> </ul>"},{"location":"reference/node_modules/nx-cloud/","title":"Nx Cloud","text":"<p>This work is licensed under a Creative Commons Attribution-NoDerivs 3.0 Unported License.  </p> <p>Distributed caching and analytics for your Nx Workspace.</p> <ul> <li>Learn more about Nx at nx.dev.</li> <li>Learn more about Nx Cloud at nx.app.</li> </ul>"}]}